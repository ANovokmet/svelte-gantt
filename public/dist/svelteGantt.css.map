{
  "version": 3,
  "file": "svelteGantt.css",
  "sources": [
    "..\\..\\src\\Gantt.html",
    "..\\..\\src\\Task.html",
    "..\\..\\src\\Row.html",
    "..\\..\\src\\Column.html",
    "..\\..\\src\\ColumnHeader.html",
    "..\\..\\src\\TimeRange.html",
    "..\\..\\src\\TimeRangeHeader.html",
    "..\\..\\src\\Milestone.html"
  ],
  "sourcesContent": [
    "<svelte:window on:resize=\"onWindowResizeEventHandler(event)\"/>\r\n<div class=\"gantt {$classes}\" ref:ganttElement>\r\n    {#each _ganttTableModules as module (module.key)}\r\n        <svelte:component this={module} {rowContainerHeight} {paddingTop} {paddingBottom} on:init=\"initModule(event.module)\" {visibleRows}/>\r\n    {/each}\r\n\r\n    <div class=\"main-header-container\" ref:sideContainer>\r\n        <div class=\"header-intermezzo\" style=\"width:{$headerWidth}px;\" use:horizontalScrollListener >\r\n            <div class=\"header-container\" style=\"width:{$width}px\">\r\n                {#each $headers as header}\r\n                    <ColumnHeader header={header} on:selectDateTime=\"adjustVisibleDateRange(event)\"/>\r\n                {/each}\r\n                {#each Object.entries($timeRangeMap) as [id, timeRange] (timeRange.id)}\r\n                    <TimeRangeHeader {...timeRange}/>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"main-container\" style=\"height:{$height}px;\" ref:mainContainer use:scrollable \r\n        class:zooming=\"zooming\" \r\n        on:wheel=\"onwheel(event)\"\r\n        bind:clientHeight=\"$visibleHeight\" \r\n        bind:clientWidth=\"$visibleWidth\">\r\n        <div class=\"content\" style=\"width:{$width}px\">\r\n            <div class=\"column-container\">\r\n                {#each columns as column}\r\n                    <Column {...column}/>\r\n                {/each}\r\n            </div>\r\n            <div class=\"row-container\" ref:rowContainer style=\"height:{rowContainerHeight}px;\">\r\n                <div style=\"transform: translateY({paddingTop}px);\">\r\n                    {#each visibleRows as row (row.model.id)}\r\n                        <Row row={row}/>\r\n                    {/each}\r\n                </div>\r\n            </div>\r\n                <div class=\"sg-foreground\">\r\n                    {#each Object.entries($timeRangeMap) as [id, timeRange] (timeRange.id)}\r\n                        <TimeRange {...timeRange}/>\r\n                    {/each}\r\n\r\n                    {#each visibleTasks as task (task.model.id)}\r\n                        <svelte:component this=\"{task.model.type === 'milestone' ? Milestone : Task}\" model={task.model}\r\n                            left={task.left} \r\n                            width={task.width}\r\n                            height={task.height}\r\n                            top={task.top}/>\r\n                    {/each}\r\n                </div>\r\n            {#each _ganttBodyModules as module (module.key)}\r\n                <svelte:component this={module} on:init=\"initModule(event.module)\" />\r\n            {/each}\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n\r\n\r\n    .zooming :global(.sg-milestone), .zooming :global(.sg-task)  {\r\n        transition: transform 0s, background-color 0.2s, width 0s !important;\r\n    }\r\n\r\n\r\n    .gantt {\r\n        width: 100%;\r\n        height: 100%;\r\n        position: relative;\r\n    }\r\n\r\n    .sg-foreground {\r\n        box-sizing: border-box;\r\n        overflow: hidden;\r\n        top: 0;\r\n        left: 0;\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n    .column-container {\r\n        position: absolute;\r\n        height: 100%;\r\n        width: 100%;\r\n        float: left;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .row-container {\r\n        width: 100%;\r\n        /* display: inline-block; */\r\n        box-sizing: border-box;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .main-container {\r\n        /* position: relative; */\r\n        overflow: auto;\r\n    }\r\n\r\n    .main-header-container {\r\n        position: relative;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .header-container {\r\n        position: relative;\r\n    }\r\n\r\n    .header-intermezzo {\r\n        overflow:hidden;\r\n    }\r\n\r\n    .content {\r\n        position: relative;\r\n    }\r\n\r\n    :global(*) {\r\n        box-sizing: border-box;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    import Task from './Task.html';\r\n    import Row from './Row.html';\r\n    import Column from './Column.html';\r\n    import ColumnHeader from './ColumnHeader.html';\r\n    import { Store } from 'svelte/store.js';\r\n    import SelectionManager from './utils/selectionManager';\r\n    import { GanttUtils, getPositionByDate } from './utils/utils';\r\n    import GanttApi from './core/api';\r\n    import TimeRange from './TimeRange.html';\r\n    import TimeRangeHeader from './TimeRangeHeader.html';\r\n    import Milestone from './Milestone.html';\r\n\r\n    import { TaskFactory } from './core/task';\r\n    import { SvelteRow } from './core/row';\r\n    import { TimeRangeFactory } from './core/timeRange';\r\n\r\n    import { GanttStore } from './store';\r\n    import { getRelativePos, debounce } from './utils/domUtils';\r\n    import { V_SCROLLBAR_WIDTH } from './core/constants';\r\n\r\n    let SvelteGantt;\r\n\r\n    export default {\r\n        setup(component){\r\n            SvelteGantt = component;\r\n            SvelteGantt.defaults = {\r\n                // datetime timeline starts on, currently moment-js object\r\n                from: null,\r\n                // datetime timeline ends on, currently moment-js object\r\n                to: null,\r\n                // width of main gantt area in px\r\n                width: 800, //rename to timelinewidth\r\n                // should timeline stretch width to fit, true overrides timelineWidth\r\n                stretchTimelineWidthToFit: false,\r\n                // height of main gantt area in px\r\n                height: 400,\r\n                // minimum unit of time task date values will round to \r\n                magnetUnit: 'minute',\r\n                // amount of units task date values will round to\r\n                magnetOffset: 15,\r\n                // duration unit of columns\r\n                columnUnit: 'minute',\r\n                // duration width of column\r\n                columnOffset: 15,\r\n                // list of headers used for main gantt area\r\n                // unit: time unit used, e.g. day will create a cell in the header for each day in the timeline\r\n                // format: datetime format used for header cell label\r\n                headers: [{unit: 'day', format: 'DD.MM.YYYY'}, {unit: 'hour', format: 'HH'}],\r\n                zoomLevels: [\r\n                    {\r\n                        headers: [{unit: 'day', format: 'DD.MM.YYYY'}, {unit: 'hour', format: 'HH'}],\r\n                        stretchTimelineWidthToFit: true\r\n                    },\r\n                    {\r\n                        headers: [{unit: 'hour', format: 'ddd D/M, H A'}, {unit: 'minute', format: 'mm', offset: 15}],\r\n                        width: 5000,\r\n                        stretchTimelineWidthToFit: false\r\n                    }\r\n                ],\r\n                zoom: 0,\r\n                // height of a single row in px\r\n                rowHeight: 52,\r\n                rowPadding: 6,\r\n                // modules used in gantt\r\n                modules: [],\r\n                // enables right click context menu\r\n                enableContextMenu: false,\r\n                // sets top level gantt class which can be used for styling\r\n                classes: '',\r\n                // width of handle for resizing task\r\n                resizeHandleWidth: 10,\r\n                // handler of button clicks\r\n                onTaskButtonClick: null, // e.g. (task) => {debugger},\r\n                // task content factory function\r\n                taskContent: null, // e.g. (task) => '<div>Custom task content</div>'\r\n\r\n                rows: [],\r\n                tasks: [],\r\n                _timeRanges: []\r\n            };\r\n\r\n            SvelteGantt.create = function(target, data, options) {\r\n\r\n                // bind gantt modules\r\n                const ganttModules = {\r\n                    ganttBodyModules: [],\r\n                    ganttTableModules: [],\r\n                    defaults: {}\r\n                }\r\n\r\n                if(options.modules) {\r\n                    options.modules.forEach((module) => {\r\n                        module.bindToGantt(ganttModules);\r\n                    })\r\n                }\r\n\r\n                // initialize gantt state\r\n                const newData = {\r\n                    initialRows: data.rows,\r\n                    initialTasks: data.tasks,\r\n                    initialDependencies: data.dependencies,\r\n                    _ganttBodyModules: ganttModules.ganttBodyModules,\r\n                    _ganttTableModules: ganttModules.ganttTableModules\r\n                };\r\n\r\n                // initialize all the gantt options\r\n                const ganttOptions = Object.assign({\r\n                    scrollTop: 0,\r\n                    scrollLeft: 0\r\n                }, SvelteGantt.defaults, ganttModules.defaults, options);\r\n                \r\n                const store = new GanttStore(ganttOptions);\r\n\r\n\r\n                return new SvelteGantt({\r\n                    target,\r\n                    data: newData,\r\n                    store\r\n                });\r\n            }\r\n        },\r\n        components: { Row, Column, ColumnHeader, TimeRange, TimeRangeHeader },\r\n        oncreate(){\r\n            const {initialRows, initialTasks, initialDependencies} = this.get();\r\n\r\n            this.refreshTasksDebounced = debounce(() => {\r\n                this.refreshTasks();\r\n            }, 250, false);\r\n\r\n            this.stoppedZooming = debounce(() => {\r\n                this.set({zooming:false});\r\n            }, 250, false);\r\n\r\n            this.initGantt();\r\n            this.initRows(initialRows);\r\n            this.recalculateGanttDimensions();\r\n            this.initTasks(initialTasks);\r\n            this.broadcastModules('onGanttCreated');\r\n        },\r\n        actions: {\r\n            scrollable(node){\r\n                const { scrollables } = this.get();\r\n\r\n                const onscroll = (event) => {\r\n                    const {scrollTop, scrollLeft} = node; \r\n                    for(let i=0; i< scrollables.length; i++){\r\n                        const scrollable = scrollables[i];\r\n                        if(scrollable.orientation === 'horizontal') {\r\n                            scrollable.node.scrollLeft = scrollLeft;\r\n                        }\r\n                        else {\r\n                            scrollable.node.scrollTop = scrollTop;\r\n                        }\r\n                    }\r\n                    //TODO: only for vertical scroll\r\n                    this.store.set({scrollTop, scrollLeft});\r\n\r\n                    this.broadcastModules('updateVisible', {scrollTop});\r\n                }\r\n\r\n                node.addEventListener('scroll', onscroll);\r\n                return {\r\n\t\t\t\t\tdestroy() {\r\n\t\t\t\t\t\tnode.removeEventListener('scroll', onscroll, false);\r\n\t\t\t\t\t}\r\n                }\r\n            },\r\n            horizontalScrollListener(node){\r\n                const { scrollables } = this.get();\r\n                scrollables.push({node, orientation: 'horizontal'});\r\n            }\r\n\t\t},\r\n        methods: {\r\n            onwheel(e){\r\n                if(e.ctrlKey){\r\n                    e.preventDefault();\r\n                    const { width, zoom, zoomLevels } = this.store.get();\r\n                    this.set({zooming:true});\r\n\r\n                    let columnOptions = {\r\n                        columnUnit: 'minute',\r\n                        columnOffset: 15,\r\n                        width\r\n                    };\r\n\r\n                    let newZoom = zoom;\r\n                    if(event.deltaY > 0) {\r\n                        newZoom --;\r\n                    }else {\r\n                        newZoom ++;\r\n                    }\r\n\r\n                    if(zoomLevels[newZoom]){\r\n                        Object.assign(\r\n                            columnOptions, \r\n                            zoomLevels[newZoom],\r\n                            { zoom: newZoom }\r\n                        );\r\n                    }\r\n\r\n                    const scale = columnOptions.width / width;\r\n                    const node = this.refs.mainContainer;\r\n                    const mousepos = getRelativePos(node, e);\r\n                    const before = node.scrollLeft + mousepos.x;\r\n                    const after = before * scale;\r\n                    const scrollLeft = after - mousepos.x;\r\n\r\n                    this.store.set(columnOptions);\r\n                    this.root.api.gantt.raise.viewChanged();\r\n                    this.recalculateGanttDimensions();\r\n                    node.scrollLeft = scrollLeft;\r\n                    this.stoppedZooming();\r\n                    this.refreshTasks();\r\n                }\r\n            },\r\n            onWindowResizeEventHandler(event){\r\n                this.recalculateGanttDimensions();\r\n                if(this.store.get().stretchTimelineWidthToFit){\r\n                    this.refreshTasks();\r\n                }\r\n            },\r\n            adjustVisibleDateRange({from, to, unit}){\r\n                console.log(from.format(), to.format());\r\n\r\n                this.store.set({\r\n                    from: from.clone(), \r\n                    to: to.clone()\r\n                });\r\n                this.refreshTasks();\r\n\r\n            },\r\n            recalculateGanttDimensions() {\r\n                const parentWidth = this.refs.ganttElement.clientWidth;\r\n                const parentHeight = this.refs.ganttElement.clientHeight;\r\n                \r\n                this.store.set({parentWidth});\r\n                \r\n                const tableWidth = this.store.get().tableWidth || 0;\r\n\r\n                const height = parentHeight - this.refs.sideContainer.clientHeight;\r\n\r\n                // -17 only if side scrollbar shows (rowContainerHeight > height)\r\n                const { rowContainerHeight } = this.get();\r\n                const headerWidth = rowContainerHeight > height ? parentWidth - tableWidth - V_SCROLLBAR_WIDTH :  parentWidth - tableWidth;\r\n\r\n                this.store.set({\r\n                    height, headerWidth\r\n                });\r\n\r\n                if(this.store.get().stretchTimelineWidthToFit){\r\n                    this.store.set({width: headerWidth});\r\n                }\r\n            },\r\n            initRows(rowsData){\r\n                const rows = [];\r\n                let y = 0;\r\n                for(let i=0; i < rowsData.length; i++){\r\n                    const currentRow = rowsData[i];\r\n                    const row = new SvelteRow(this, currentRow);\r\n                    rows.push(row);\r\n                    row.posY = y;\r\n                    y += row.height;\r\n                }\r\n\r\n                this.store.addAllRow(rows);\r\n            },\r\n            initTasks(taskData){\r\n                const tasks = [];\r\n\r\n                for(let i=0; i < taskData.length; i++){\r\n                    const currentTask = taskData[i];\r\n                    const task = this.taskFactory.createTask(currentTask);\r\n                    tasks.push(task);\r\n                }\r\n\r\n                this.store.addAllTask(tasks);\r\n                //this.selectionManager.clearSelection();\r\n            },\r\n            initTimeRanges(timeRangeData){\r\n                const timeRangeMap = {};\r\n\r\n                for(let i = 0; i < timeRangeData.length; i++){\r\n                    const currentTimeRange = timeRangeData[i];\r\n                    const timeRange = this.timeRangeFactory.create(currentTimeRange);\r\n                    timeRangeMap[currentTimeRange.id] = timeRange;\r\n                }\r\n\r\n                this.store.set({timeRangeMap})\r\n            },\r\n            initGantt(){\r\n                if(!this.store.get().gantt){\r\n                    this.store.set({\r\n                        bodyElement: this.refs.mainContainer, \r\n                        rowContainerElement: this.refs.rowContainer,\r\n                        gantt: this\r\n                    });\r\n                    \r\n                    this.selectionManager = new SelectionManager(this.store);\r\n                    this.utils = new GanttUtils(this);\r\n                    this.api = new GanttApi();\r\n                    this.taskFactory = new TaskFactory(this);\r\n                    this.timeRangeFactory = new TimeRangeFactory(this);\r\n\r\n                    this.api.registerEvent('tasks', 'move');\r\n                    this.api.registerEvent('tasks', 'select');\r\n                    this.api.registerEvent('tasks', 'switchRow');\r\n                    this.api.registerEvent('tasks', 'moveEnd');\r\n                    this.api.registerEvent('tasks', 'changed');\r\n                    \r\n                    this.api.registerEvent('gantt', 'viewChanged');\r\n\r\n                    this.row = SvelteRow;\r\n                }\r\n            },\r\n            initModule(module){\r\n                const moduleOptions = Object.assign({\r\n                    _gantt: this,\r\n                    _options: this.get()\r\n                }, {});//merge with module specific data, modules[module.constructor.key]);\r\n                module.initModule(moduleOptions);\r\n                \r\n                const {_modules} = this.get();\r\n                _modules.push(module);\r\n            },\r\n            broadcastModules(event, data) {\r\n                const {_modules} = this.get();\r\n                _modules.forEach((module) => {\r\n                    if (typeof module[event] === 'function') {\r\n                        module[event](data);\r\n                    }\r\n                });\r\n            },\r\n            updateVisibleEntities(){\r\n                const { _timeRanges } = this.store.get();\r\n                _timeRanges.forEach(timeRange => {\r\n                    timeRange.updatePosition();\r\n                    timeRange.updateView();\r\n                });\r\n            },\r\n            refreshTasks(){\r\n                const { allTasks } = this.store.get();\r\n                allTasks.forEach(task => {\r\n\r\n                    const newLeft = this.root.utils.getPositionByDate(task.model.from);\r\n                    const newRight = this.root.utils.getPositionByDate(task.model.to);\r\n\r\n                    task.left = newLeft;\r\n                    task.width = newRight - newLeft;\r\n                });\r\n                this.store.set({taskMap: this.store.get().taskMap});\r\n                this.updateVisibleEntities();\r\n            },\r\n            updateView(options){ // {from, to, headers, width}\r\n                this.store.set(options);\r\n                if(this.store.get().stretchTimelineWidthToFit){\r\n                    this.recalculateGanttDimensions();\r\n                }\r\n\r\n                this.refreshTasks();\r\n\r\n                this.broadcastModules('updateView', options);//{ from, to, headers });\r\n            },\r\n            selectTask(id) {\r\n                const { taskMap } = this.get();\r\n                const task = taskMap[id];\r\n                if(task) {\r\n                    this.selectionManager.selectSingle(task);\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                columns: [],\r\n                scrollables: [],\r\n                visibleRows: [],\r\n                visibleTasks: [],\r\n                _ganttBodyModules: [],\r\n                _ganttTableModules: [],\r\n                _modules: [],\r\n\r\n                rows: [],\r\n\r\n                paddingTop: 0,\r\n                paddingBottom: 0,\r\n                Task, Milestone,\r\n\r\n                zooming: false\r\n            }\r\n        },\r\n        computed: {\r\n            // exctract to columns component\r\n            columnWidth: ({$from, $to, $width, $columnOffset, $columnUnit}) => getPositionByDate($from.clone().add($columnOffset, $columnUnit), $from, $to, $width),\r\n            columnCount: ({$width, columnWidth}) => Math.ceil($width / columnWidth),\r\n            columns: ({$from, columnWidth, columnCount, $columnOffset, $columnUnit, $to, $width}) => {\r\n                const columns = [];\r\n                const columnFrom = $from.clone();\r\n                for(let i = 0; i < columnCount; i++){\r\n                    columns.push({width: columnWidth, from: columnFrom.clone(), left: getPositionByDate(columnFrom, $from, $to, $width)});\r\n                    columnFrom.add($columnOffset, $columnUnit);\r\n                }\r\n                return columns;\r\n            },\r\n\r\n            rowContainerHeight: ({$allRows, $rowHeight}) => $allRows.length * $rowHeight,\r\n            startIndex: ({$scrollTop, $rowHeight}) => Math.floor($scrollTop / $rowHeight),\r\n            endIndex: ({startIndex, $visibleHeight, $rowHeight, $allRows}) => Math.min(startIndex + Math.ceil($visibleHeight / $rowHeight ), $allRows.length - 1),\r\n            paddingTop: ({startIndex, $rowHeight}) => startIndex * $rowHeight,\r\n            paddingBottom: ({$allRows, endIndex, $rowHeight}) => ($allRows.length - endIndex - 1) * $rowHeight,\r\n\r\n            visibleRows: ({$allRows, startIndex, endIndex}) => $allRows.slice(startIndex, endIndex + 1),\r\n            visibleTasks: ({$taskMap, visibleRows, rowTaskMap}) => {\r\n                const visibleTasks = [];\r\n                visibleRows.forEach(row => {\r\n                    if(!rowTaskMap[row.model.id])\r\n                        return;\r\n\r\n                    rowTaskMap[row.model.id].forEach(id => {\r\n                        visibleTasks.push($taskMap[id]);\r\n                    });\r\n                });\r\n                return visibleTasks;\r\n            },\r\n            rowTaskMap: ({$allTasks}) => {\r\n                const reducer = (cache, task) => {\r\n                    if(!cache[task.model.resourceId])\r\n                        cache[task.model.resourceId] = [];\r\n\r\n                    cache[task.model.resourceId].push(task.model.id);\r\n                    return cache;\r\n                }\r\n                console.log('recaculated map');\r\n                return $allTasks.reduce(reducer, {});\r\n            },\r\n\r\n        }\r\n    };\r\n</script>",
    "<div ref:taskElement\r\n    class=\"sg-task {model.classes}\" \r\n    style=\"\r\n    width:{widthT}px;\r\n    height:{height}px;\r\n    transform: translate({posX}px, {posY}px);\"\r\n    use:drag \r\n    on:click=\"select(event)\"\r\n    class:selected=\"selected\"\r\n    class:moving=\"dragging||resizing\">\r\n    <div class=\"sg-task-background\" style=\"width:{model.amountDone}%\"></div>\r\n    <div class=\"sg-task-content\">\r\n        {#if model.html}\r\n            {@html model.html}\r\n        {:elseif $taskContent}\r\n            {@html $taskContent(this)}\r\n        {:else}\r\n            {model.label}\r\n        {/if}\r\n        <span class=\"debug\">x:{posX|0} y:{posY|0}, x:{left|0} y:{top|0}</span>\r\n        \r\n\r\n        {#if model.showButton}\r\n            <span class=\"sg-task-button {model.buttonClasses}\" on:click=\"onclick(event)\">\r\n                {@html model.buttonHtml}\r\n            </span>\r\n        {/if}\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .debug {\r\n        position: absolute;\r\n        top: -10px;\r\n        right: 0;\r\n        font-size:8px;\r\n        color: black;\r\n    }\r\n\r\n    .sg-task {\r\n\t\tposition: absolute;     \r\n        top: 0;\r\n        bottom: 0;\r\n\r\n        white-space: nowrap;\r\n        /* overflow: hidden; */\r\n\r\n        transition: background-color 0.2s;\r\n\t}\r\n\r\n    .sg-task-background {\r\n        position: absolute;\r\n        height: 100%;\r\n        top: 0;\r\n    }\r\n\r\n    .sg-task-content {\r\n        position: absolute;\r\n        height: 100%;\r\n        top: 0;\r\n\r\n        \r\n        padding-left: 14px;\r\n        font-size: 14px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n    }\r\n\r\n    .sg-task:not(.moving) {\r\n        transition: transform 0.2s, background-color 0.2s, width 0.2s;\r\n    }\r\n\r\n    .sg-task.moving{\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-task:hover::before {\r\n        content: '';\r\n        width: 4px;\r\n        height: 50%;\r\n        top: 25%;\r\n        position: absolute;\r\n        cursor: ew-resize;\r\n        border-style: solid;\r\n        border-color: rgba(255, 255, 255, 0.5);\r\n            \r\n        margin-left: 3px;\r\n        left: 0;\r\n        border-width: 0 1px;\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-task:hover::after {\r\n        content: '';\r\n        width: 4px;\r\n        height: 50%;\r\n        top: 25%;\r\n        position: absolute;\r\n        cursor: ew-resize;\r\n        border-style: solid;\r\n        border-color: rgba(255, 255, 255, 0.5);\r\n\r\n        margin-right: 3px;\r\n        right: 0;\r\n        border-width: 0 1px;\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-task.selected {\r\n        outline: 2px solid rgba(3, 169, 244, 0.5);\r\n        outline-offset: 3px;\r\n        z-index: 1;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    import { setCursor } from \"./utils/domUtils\";\r\n    import { draggable } from \"./core/drag/draggable\";\r\n    import { ComponentPosProvider } from \"./core/drag/componentPosProvider\";\r\n\r\n    export default {\r\n        onstate({ changed, current, previous }) {\r\n            if(!current.dragging && !current.resizing){\r\n                this.set({\r\n                    posX: current.left,\r\n                    widthT: current.width,\r\n                    posY: current.top,\r\n                });\r\n            }\r\n\t\t},\r\n        actions: {\r\n\t\t\tdrag(node) {\r\n                const { rowContainerElement, resizeHandleWidth } = this.store.get();\r\n\r\n                const ondrop = ({ posX, posY, widthT, event, dragging, resizing }) => {\r\n                    const { model } = this.get();\r\n                    const { taskMap, rowMap, rowPadding } = this.store.get();\r\n\r\n                    let rowChangeValid = true;\r\n                    //row switching\r\n                    if(dragging){\r\n                        const rowCenterX = this.root.refs.mainContainer.getBoundingClientRect().left + this.root.refs.mainContainer.getBoundingClientRect().width / 2;\r\n                        const sourceRow = rowMap[model.resourceId];\r\n                        \r\n                        let elements = document.elementsFromPoint(rowCenterX, event.clientY);\r\n                        let rowElement = elements.find((element) => !!element.getAttribute(\"data-row-id\"));\r\n                        if(rowElement !== undefined && rowElement !== sourceRow.rowElement) {\r\n                            const rowId = parseInt(rowElement.getAttribute(\"data-row-id\"));\r\n                            const targetRow = rowMap[rowId];\r\n\r\n                            if(targetRow.model.enableDragging){\r\n                                //targetRow.moveTask(this);\r\n                                model.resourceId = targetRow.model.id;\r\n                                this.root.api.tasks.raise.switchRow(this, targetRow, sourceRow);\r\n                            }\r\n                            else {\r\n                                rowChangeValid = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    this.set({dragging: false, resizing: false});\r\n                    const task = taskMap[model.id];\r\n\r\n                    if(rowChangeValid) {\r\n                        const newFrom = this.root.utils.roundTo(this.root.utils.getDateByPosition(posX)); \r\n                        const newTo = this.root.utils.roundTo(this.root.utils.getDateByPosition(posX+widthT));\r\n                        const newLeft = this.root.utils.getPositionByDate(newFrom);\r\n                        const newRight = this.root.utils.getPositionByDate(newTo);\r\n\r\n                        Object.assign(model, {\r\n                            from: newFrom,\r\n                            to: newTo\r\n                        });\r\n                        \r\n                        this.store.updateTask({\r\n                            ...task,\r\n                            left: newLeft,\r\n                            width: newRight - newLeft,\r\n                            top: rowPadding + rowMap[model.resourceId].posY,\r\n                            model\r\n                        });\r\n                    }\r\n                    else {\r\n                        // reset position\r\n                        this.store.updateTask({\r\n                            ...task\r\n                        });\r\n                    }\r\n\r\n                    setCursor('default');\r\n                }\r\n\r\n                return draggable(node, {\r\n                    onDown: ({dragging, resizing}) => {\r\n                        this.set({dragging, resizing});\r\n                        if(dragging) {\r\n                            setCursor('move');\r\n                        }\r\n                        if(resizing) {\r\n                            setCursor('e-resize');\r\n                        }\r\n                    }, \r\n                    onResize: (state) => {\r\n                        this.set(state);\r\n                        const { posX, posY, widthT } = this.get();\r\n                    }, \r\n                    onDrag: ({posX, posY}) => {\r\n                        this.set({posX, posY});\r\n                    }, \r\n                    dragAllowed: () => {\r\n                        const { model } = this.get();\r\n                        const { rowMap } = this.store.get();\r\n                        const row = rowMap[model.resourceId];\r\n                        return row.model.enableDragging && model.enableDragging\r\n                    },\r\n                    resizeAllowed: () => {\r\n                        const { model } = this.get();\r\n                        const { rowMap } = this.store.get();\r\n                        const row = rowMap[model.resourceId];\r\n                        return row.model.enableDragging && model.enableDragging\r\n                    },\r\n                    onDrop: ondrop, \r\n                    container: rowContainerElement, \r\n                    resizeHandleWidth\r\n                }, new ComponentPosProvider(this));\r\n            }\r\n        },\r\n        methods: {\r\n            select(event){\r\n                const { model } = this.get();\r\n                if(event.ctrlKey){\r\n                    this.root.selectionManager.toggleSelection(model.id);\r\n                }\r\n                else{\r\n                    this.root.selectionManager.selectSingle(model.id);\r\n                }\r\n                \r\n                if(this.get().selected){\r\n                    this.root.api.tasks.raise.select(model);\r\n                }\r\n            },\r\n            onclick(event){\r\n                const { onTaskButtonClick } = this.store.get();\r\n                if(onTaskButtonClick) {\r\n                    event.stopPropagation();\r\n                    const { task } = this.get();\r\n                    onTaskButtonClick(task);\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                dragging: false,\r\n                selected: false,\r\n                resizing: false,\r\n\r\n                widthT: null,\r\n                posX: null,\r\n                posY: null\r\n            }\r\n        },\r\n        computed: {\r\n            selected: ({$selection, model}) => $selection.indexOf(model.id) !== -1,\r\n            row: ({$rowMap, model}) => $rowMap[model.resourceId]\r\n        }\r\n    };\r\n</script>",
    "<div class=\"row {row.model.classes}\" ref:row style=\"height:{$rowHeight}px\" data-row-id=\"{row.model.id}\">\r\n    {#if row.model.contentHtml}\r\n        {@html row.model.contentHtml}\r\n    {/if}\r\n</div>    \r\n<style>\r\n    .row {\r\n        position: relative;\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n    }\r\n</style>\r\n<script>\r\n    import { sortFn } from \"./utils/domUtils\";\r\n\r\n    export default {\r\n        oncreate() {\r\n            const { row } = this.get();\r\n            row.rowElement = this.refs.row;\r\n            row.component = this;\r\n\r\n            if(!row.classes){ //default\r\n                row.classes = [];\r\n            }\r\n        },\r\n        onupdate({ changed, current, previous }) {\r\n            if(changed.row){\r\n                current.row.rowElement = this.refs.row;\r\n                current.row.component = this;\r\n            }\r\n        },\r\n        ondestroy(){\r\n            const { row } = this.get();\r\n            row.rowElement = null;\r\n            row.component = null;\r\n        }\r\n    };\r\n</script>",
    "<div class=\"column\" style=\"width:{width}px;left:{left}px\"></div>\r\n<style>\r\n    .column {\r\n        position: absolute;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n    }\r\n</style>\r\n<script>\r\n    export default {\r\n        \r\n    }\r\n</script>",
    "<div class=\"column-header-row\" style=\"width:{width}px\">\r\n    {#each headers as header}\r\n        <div class=\"column-header\" style=\"width:{header.width}px\" on:click=\"fire('selectDateTime', { from: header.from, to: header.to, unit: header.unit })\">\r\n            {header.label || 'N/A'}\r\n        </div>\r\n    {/each}\r\n</div>\r\n<style>\r\n    .column-header-row {\r\n        box-sizing: border-box;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n\r\n        height: 32px;\r\n    }\r\n\r\n    .column-header {\r\n        position: relative;\r\n        display: inline-block;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n        text-overflow: clip;\r\n        /* vertical-align: top; */\r\n        text-align: center;\r\n\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 1em;    \r\n        font-size: 14px;\r\n        font-weight: 300;\r\n        transition: background 0.2s;\r\n\r\n        cursor: pointer;     \r\n        user-select: none;\r\n    }\r\n\r\n    .column-header:hover {\r\n        background: #f9f9f9;\r\n    }\r\n    \r\n</style>\r\n<script>\r\n    import { getPositionByDate } from \"./utils/utils\";\r\n    \r\n    export default {\r\n        data(){\r\n            return {\r\n                headers: [],\r\n                width: null\r\n            }\r\n        },\r\n        computed: {\r\n            columnWidth: ({$from, $to, $width, header}) => {\r\n                return getPositionByDate($from.clone().add(header.offset || 1, header.unit), $from, $to, $width);\r\n            },\r\n            columnCount: ({$width, columnWidth}) => Math.ceil($width / columnWidth),\r\n            headers: ({$from, columnWidth, columnCount, header, $width}) => {\r\n                const headers = [];\r\n                let headerTime = $from.clone().startOf(header.unit);\r\n                const step = header.offset || 1;\r\n\r\n                for(let i = 0; i < columnCount; i++){\r\n                    headers.push({\r\n                        width: Math.min(columnWidth, $width), \r\n                        label: headerTime.format(header.format),\r\n                        from: headerTime.clone(),\r\n                        to: headerTime.clone().add(step, header.unit),\r\n                        unit: header.unit\r\n                    });\r\n                    headerTime.add(step, header.unit);\r\n                }\r\n                return headers;\r\n            }\r\n        }\r\n    };\r\n</script>",
    "<div class=\"sg-time-range\" class:moving=\"resizing\" style=\"width:{widthT}px;left:{posX}px\">\r\n    <div class=\"sg-time-range-label\">{model.label}</div>\r\n</div>\r\n<style>\r\n    .sg-time-range {\r\n        height: 100%;\r\n        position: absolute;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n\r\n        background-image: linear-gradient(-45deg, rgba(0, 0, 0, 0) 46%, #e03218 49%, #e03218 51%, rgba(0, 0, 0, 0) 55%);\r\n        background-size: 6px 6px !important;\r\n        color: red;\r\n        font-weight: 400;\r\n    }\r\n\r\n    .sg-time-range-label {\r\n        margin-top: 10px;\r\n        background: #fff;\r\n        white-space: nowrap;\r\n        padding: 4px;\r\n        font-weight: 400;\r\n        font-size: 10px;\r\n    }\r\n</style>\r\n<script>\r\n    export default {\r\n        onstate({ changed, current, previous }) {\r\n            if(!current.resizing){\r\n                this.set({\r\n                    posX: current.left,\r\n                    widthT: current.width\r\n                });\r\n            }\r\n        },\r\n        data(){\r\n            return {\r\n                resizing: false,\r\n                widthT: null,\r\n                posX: null\r\n            }\r\n        }\r\n    }\r\n</script>",
    "<div class=\"sg-time-range-control\" style=\"width:{widthT}px;left:{posX}px\">\r\n    <div class=\"sg-time-range-handle-left\" use:drag></div>\r\n    <div class=\"sg-time-range-handle-right\" use:drag></div>\r\n</div>\r\n<style>\r\n    .sg-time-range-control {\r\n        position: absolute;\r\n    }\r\n\r\n    .sg-time-range-handle-left {\r\n        position: absolute;\r\n        left: 0;\r\n    }\r\n\r\n    .sg-time-range-handle-right {\r\n        position: absolute;\r\n        right: 0;\r\n    }\r\n\r\n    .sg-time-range-handle-left::before, .sg-time-range-handle-right::before {\r\n        position: absolute;\r\n        content: '';\r\n        bottom: 4px;\r\n        border-radius: 6px 6px 6px 0;\r\n        border: 2px solid #b0b0b7;\r\n        width: 9px;\r\n        height: 9px;\r\n        transform: translateX(-50%) rotate(-45deg);\r\n        background-color: #fff;\r\n\r\n        border-color: #e03218;\r\n        cursor: ew-resize;\r\n    }\r\n</style>\r\n<script>\r\n    import { draggable } from \"./core/drag/draggable\";\r\n    import { ComponentPosProvider } from \"./core/drag/componentPosProvider\";\r\n\r\n    export default {\r\n        onstate({ changed, current, previous }) {\r\n            if(!current.resizing){\r\n                this.set({\r\n                    posX: current.left,\r\n                    widthT: current.width\r\n                });\r\n            }\r\n\t\t},\r\n        actions: {\r\n            drag(node) {\r\n                const { rowContainerElement, resizeHandleWidth } = this.store.get();\r\n\r\n                const ondrop = ({ posX, widthT, event }) => {\r\n                    const { model } = this.get();\r\n                    \r\n                    const newFrom = this.root.utils.roundTo(this.root.utils.getDateByPosition(posX)); \r\n                    const newTo = this.root.utils.roundTo(this.root.utils.getDateByPosition(posX+widthT));\r\n                    const newLeft = this.root.utils.getPositionByDate(newFrom);\r\n                    const newRight = this.root.utils.getPositionByDate(newTo);\r\n                    \r\n                    Object.assign(model, {\r\n                        from: newFrom,\r\n                        to: newTo\r\n                    });\r\n\r\n                    var state = {\r\n                        resizing: false,\r\n                        left: newLeft,\r\n                        width: newRight - newLeft,\r\n                        model\r\n                    }\r\n\r\n                    updateEntity(state);\r\n                    window.removeEventListener('mousemove', onmousemove, false);\r\n                };\r\n                \r\n                const updateEntity = (state) => {\r\n                    const { model } = this.get();\r\n                    const { timeRangeMap } = this.store.get();\r\n                    const entity = timeRangeMap[model.id];\r\n                    this.store.updateTimeRange({...entity, ...state});\r\n                }\r\n\r\n                return draggable(node, {\r\n                    onDown: (state) => {\r\n                        updateEntity({...state, resizing: true});\r\n                    }, \r\n                    onResize: ({posX, widthT}) => {\r\n                        updateEntity({posX, widthT});\r\n                    },\r\n                    dragAllowed: false,\r\n                    resizeAllowed: true,\r\n                    onDrop: ondrop, \r\n                    container: rowContainerElement, \r\n                    resizeHandleWidth\r\n                }, new ComponentPosProvider(this));\r\n            }\r\n        },\r\n        data(){\r\n            return {\r\n                resizing: false,\r\n                widthT: null,\r\n                posX: null\r\n            }\r\n        }\r\n    }\r\n</script>",
    "<div ref:milestoneElement\r\n    class=\"sg-milestone {model.classes}\" \r\n    style=\"transform: translate({posX}px, {posY}px);height:{height}px;width:{height}px\"\r\n    use:drag \r\n    on:click=\"select(event)\"\r\n    class:selected=\"selected\"\r\n    class:moving=\"dragging\">\r\n    <div class=\"inside\"></div>\r\n        <span class=\"debug\">x:{posX|0} y:{posY|0}, x:{left|0} y:{top|0}</span>\r\n</div>\r\n\r\n<style>\r\n    .sg-milestone {\r\n\t\tposition: absolute;     \r\n        top: 0;\r\n        bottom: 0;\r\n\r\n        white-space: nowrap;\r\n        /* overflow: hidden; */\r\n\r\n        height: 20px;\r\n        width: 20px;\r\n\r\n        min-width: 40px;\r\n        margin-left: -20px;\r\n        display: flex;\r\n        align-items: center;\r\n        flex-direction: column;\r\n\r\n        transition: background-color 0.2s;\r\n    }\r\n\r\n    .sg-milestone .inside {\r\n        position: relative;\r\n    }\r\n\r\n    .sg-milestone .inside:before {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        content: ' ';\r\n        height: 28px;\r\n        width: 28px;\r\n        transform-origin: 0 0;\r\n        transform: rotate(45deg); \r\n        /* //after -45 */\r\n        background-color: #feac31;\r\n        border-color: #feac31;\r\n    }\r\n\r\n    .sg-milestone:not(.moving) {\r\n        transition: transform 0.2s, background-color 0.2s, width 0.2s;\r\n    }\r\n\r\n    .sg-milestone.moving{\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-milestone.selected {\r\n        outline: 2px solid rgba(3, 169, 244, 0.5);\r\n        outline-offset: 3px;\r\n        z-index: 1;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    import { draggable } from \"./core/drag/draggable\";\r\n    import { ComponentPosProvider } from \"./core/drag/componentPosProvider\";\r\n\r\n    export default {\r\n        oncreate(){\r\n\r\n            const { model } = this.get();\r\n\r\n            const left = this.root.utils.getPositionByDate(model.from);\r\n            const top = this.store.get().rowMap[model.resourceId].posY + this.store.get().rowPadding;\r\n            const height = this.store.get().rowMap[model.resourceId].height - 2 * this.store.get().rowPadding;\r\n\r\n            this.set({\r\n                left,\r\n                top,\r\n                height\r\n            });\r\n\r\n        },\r\n        onstate({ changed, current, previous }) {\r\n            if(!current.dragging){\r\n                this.set({\r\n                    posX: current.left,\r\n                    posY: current.top,\r\n                });\r\n            }\r\n\t\t},\r\n        actions: {\r\n\t\t\tdrag(node) {\r\n                const { rowContainerElement } = this.store.get();\r\n\r\n                const ondrop = ({ posX, posY, widthT, event }) => {\r\n                    const { model } = this.get();\r\n                    const { taskMap, rowMap, rowPadding } = this.store.get();\r\n\r\n                    let rowChangeValid = true;\r\n                    //row switching\r\n                    const rowCenterX = this.root.refs.mainContainer.getBoundingClientRect().left + this.root.refs.mainContainer.getBoundingClientRect().width / 2;\r\n                    const sourceRow = rowMap[model.resourceId];\r\n                    \r\n                    let elements = document.elementsFromPoint(rowCenterX, event.clientY);\r\n                    let rowElement = elements.find((element) => !!element.getAttribute(\"data-row-id\"));\r\n                    if(rowElement !== undefined && rowElement !== sourceRow.rowElement) {\r\n                        const rowId = parseInt(rowElement.getAttribute(\"data-row-id\"));\r\n                        const targetRow = rowMap[rowId];\r\n\r\n                        if(targetRow.model.enableDragging){\r\n                            //targetRow.moveTask(this);\r\n                            model.resourceId = targetRow.model.id;\r\n                            this.root.api.tasks.raise.switchRow(this, targetRow, sourceRow);\r\n                        }\r\n                        else {\r\n                            rowChangeValid = false;\r\n                        }\r\n                    }\r\n                    \r\n                    this.set({dragging: false});\r\n                    const task = taskMap[model.id];\r\n                    if(rowChangeValid) {\r\n                        const newFrom = this.root.utils.roundTo(this.root.utils.getDateByPosition(posX)); \r\n                        const newLeft = this.root.utils.getPositionByDate(newFrom);\r\n\r\n                        Object.assign(model, {\r\n                            from: newFrom\r\n                        });\r\n                        \r\n                        this.store.updateTask({\r\n                            ...task,\r\n                            left: newLeft,\r\n                            top: rowPadding + rowMap[model.resourceId].posY,\r\n                            model\r\n                        });\r\n                    }\r\n                    else {\r\n                        // reset position\r\n                        this.store.updateTask({\r\n                            ...task\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return draggable(node, {\r\n                    onDown: (state) => {\r\n                        this.set({...state, dragging: true});\r\n                    }, \r\n                    onDrag: ({posX, posY}) => {\r\n                        this.set({posX, posY});\r\n                    },\r\n                    dragAllowed: () => {\r\n                        const { model } = this.get();\r\n                        const { rowMap } = this.store.get();\r\n                        const row = rowMap[model.resourceId];\r\n                        return row.model.enableDragging && model.enableDragging\r\n                    },\r\n                    resizeAllowed: false,\r\n                    onDrop: ondrop, \r\n                    container: rowContainerElement, \r\n                }, new ComponentPosProvider(this));\r\n            }\r\n        },\r\n        methods: {\r\n            select(event){\r\n                const { model } = this.get();\r\n                if(event.ctrlKey){\r\n                    this.root.selectionManager.toggleSelection(model.id);\r\n                }\r\n                else{\r\n                    this.root.selectionManager.selectSingle(model.id);\r\n                }\r\n                \r\n                if(this.get().selected){\r\n                    this.root.api.tasks.raise.select(model);\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                dragging: false,\r\n                selected: false,\r\n\r\n                posX: null,\r\n                posY: null,\r\n                height: 20\r\n            }\r\n        },\r\n        computed: {\r\n            selected: ({$selection, model}) => $selection.indexOf(model.id) !== -1,\r\n            row: ({$rowMap, model}) => $rowMap[model.resourceId]\r\n        }\r\n    };\r\n</script>"
  ],
  "names": [],
  "mappings": "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"
}