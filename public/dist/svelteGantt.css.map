{
  "version": 3,
  "file": "svelteGantt.css",
  "sources": [
    "..\\..\\src\\Gantt.html",
    "..\\..\\src\\modules\\table\\Table.html",
    "..\\..\\src\\modules\\dependencies\\GanttDependencies.html",
    "..\\..\\src\\entities\\Task.html",
    "..\\..\\src\\entities\\Row.html",
    "..\\..\\src\\entities\\Milestone.html",
    "..\\..\\src\\entities\\TimeRange.html",
    "..\\..\\src\\entities\\TimeRangeHeader.html",
    "..\\..\\src\\column\\Column.html",
    "..\\..\\src\\column\\ColumnHeader.html",
    "..\\..\\src\\column\\Columns.html",
    "..\\..\\src\\ui\\ContextMenu.html",
    "..\\..\\src\\ui\\Resizer.html",
    "..\\..\\src\\modules\\table\\TableRow.html",
    "..\\..\\src\\modules\\dependencies\\Dependency.html",
    "..\\..\\src\\modules\\dependencies\\Arrow.html"
  ],
  "sourcesContent": [
    "<svelte:window on:resize=\"onWindowResizeEventHandler(event)\" />\r\n<div class=\"sg-gantt {$classes}\" ref:ganttElement>\r\n\t{#each _ganttTableModules as module (module.key)}\r\n\t<svelte:component this={module} {rowContainerHeight} {paddingTop} {paddingBottom} tableWidth={$tableWidth} on:init=\"initModule(event.module)\" {visibleRows} />\r\n\r\n    <Resizer x={$tableWidth} on:resize=\"onresize(event)\"></Resizer>\r\n\t{/each}\r\n\r\n\t<div class=\"sg-timeline sg-view\">\r\n\t\t<div class=\"sg-header\" ref:mainHeaderContainer bind:clientHeight=\"$headerHeight\" class:right-scrollbar-visible=\"rightScrollbarVisible\">\r\n\t\t\t<div class=\"sg-header-scroller\" use:horizontalScrollListener>\r\n\t\t\t\t<div class=\"header-container\" style=\"width:{$width}px\">\r\n                    <ColumnHeaders on:selectDateTime=\"adjustVisibleDateRange(event)\" />\r\n\t\t\t\t\t{#each Object.entries($timeRangeMap) as [id, timeRange] (timeRange.id)}\r\n\t\t\t\t\t<TimeRangeHeader {...timeRange} />\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"sg-timeline-body\" ref:mainContainer use:scrollable class:zooming=\"zooming\" on:wheel=\"onwheel(event)\"\r\n\t\t bind:clientHeight=\"$visibleHeight\" bind:clientWidth=\"$visibleWidth\">\r\n\t\t\t<div class=\"content\" style=\"width:{$width}px\">\r\n                <Columns bind:columns on:columnsGenerated=\"refreshTasksDebounced()\"/>\r\n\t\t\t\t<div class=\"sg-rows\" ref:rowContainer style=\"height:{rowContainerHeight}px;\">\r\n\t\t\t\t\t<div style=\"transform: translateY({paddingTop}px);\">\r\n\t\t\t\t\t\t{#each visibleRows as row (row.model.id)}\r\n\t\t\t\t\t\t<Row row={row} />\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"sg-foreground\">\r\n\t\t\t\t\t{#each Object.entries($timeRangeMap) as [id, timeRange] (timeRange.id)}\r\n\t\t\t\t\t<TimeRange {...timeRange} />\r\n\t\t\t\t\t{/each}\r\n\r\n\t\t\t\t\t{#each visibleTasks as task (task.model.id)}\r\n\t\t\t\t\t<svelte:component this=\"{task.model.type === 'milestone' ? Milestone : Task}\" model={task.model} left={task.left}\r\n\t\t\t\t\t width={task.width} height={task.height} top={task.top} />\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t\t{#each _ganttBodyModules as module (module.key)}\r\n\t\t\t\t<svelte:component this={module} {paddingTop} {paddingBottom} {visibleRows} on:init=\"initModule(event.module)\" />\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n    :global(.sg-view:not(:first-child)) {\r\n        margin-left: 5px;\r\n    }\r\n    \r\n    /* This class should take into account varying widths of the scroll bar */\r\n    .right-scrollbar-visible {\r\n        padding-right: 17px;\r\n    }\r\n\r\n    .sg-timeline {\r\n        flex: 1 1 0%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        overflow-x: auto;\r\n    }\r\n\r\n    .zooming :global(.sg-milestone),\r\n    .zooming :global(.sg-task) {\r\n        transition: transform 0s, background-color 0.2s, width 0s !important;\r\n    }\r\n\r\n    .sg-gantt {\r\n        display: flex;\r\n\r\n        width: 100%;\r\n        height: 100%;\r\n        position: relative;\r\n    }\r\n\r\n    .sg-foreground {\r\n        box-sizing: border-box;\r\n        overflow: hidden;\r\n        top: 0;\r\n        left: 0;\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-rows {\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .sg-timeline-body {\r\n        overflow: auto;\r\n        flex: 1 1 0;\r\n    }\r\n\r\n    .sg-header {\r\n        \r\n    }\r\n\r\n    .header-container {\r\n        position: relative;\r\n    }\r\n\r\n    .sg-header-scroller {\r\n        border-right: 1px solid #efefef;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .content {\r\n        position: relative;\r\n    }\r\n\r\n    :global(*) {\r\n        box-sizing: border-box;\r\n    }\r\n</style>\r\n\r\n<script>\r\n  import { Task, Row, TimeRange, TimeRangeHeader, Milestone } from './entities';\r\n  import { Columns, ColumnHeaders } from './column';\r\n  import { Resizer } from \"./ui\";\r\n\r\n  import { GanttUtils, getPositionByDate } from \"./utils/utils\";\r\n  import { GanttApi } from \"./core/api\";\r\n\r\n  import { SelectionManager } from \"./utils/selectionManager\";\r\n  import { TaskFactory } from \"./core/task\";\r\n  import { RowFactory } from \"./core/row\";\r\n  import { TimeRangeFactory } from \"./core/timeRange\";\r\n  import { DragDropManager } from \"./core/drag\";\r\n\r\n  import { GanttStore } from \"./core/store\";\r\n  import { getRelativePos, debounce } from \"./utils/domUtils\";\r\n  import { findByPosition, ColumnService } from \"./core/column\";\r\n\r\n  export default {\r\n    setup(component) {\r\n\r\n    },\r\n    components: { Row, Columns, ColumnHeaders, TimeRange, TimeRangeHeader, Resizer },\r\n    oncreate() {\r\n        const { initialRows, initialTasks } = this.get();\r\n\r\n        this.store.compute('width', ['visibleWidth', 'minWidth', 'stretchTimelineWidthToFit'], (visible, min, stretch) => {\r\n            return stretch && visible > min ? visible : min;\r\n        });\r\n\r\n        this.stoppedZooming = debounce(() => { this.set({ zooming: false }); }, 250, false);\r\n\r\n        this.initGantt();\r\n        this.initRows(initialRows);\r\n\r\n        this.store.set({\r\n            visibleHeight: this.refs.mainContainer.clientHeight,\r\n            visibleWidth: this.refs.mainContainer.clientWidth\r\n        });\r\n\r\n        this.initTasks(initialTasks);\r\n        this.broadcastModules(\"onGanttCreated\");\r\n    },\r\n    actions: {\r\n        scrollable(node) {\r\n            const { scrollables } = this.get();\r\n\r\n            const onscroll = event => {\r\n                const { scrollTop, scrollLeft } = node;\r\n\r\n                scrollables.forEach(scrollable => {\r\n                    if (scrollable.orientation === \"horizontal\") {\r\n                        scrollable.node.scrollLeft = scrollLeft;\r\n                    } else {\r\n                        scrollable.node.scrollTop = scrollTop;\r\n                    }\r\n                });\r\n\r\n                //TODO: only for vertical scroll\r\n                this.store.set({ scrollTop, scrollLeft });\r\n\r\n                this.broadcastModules(\"updateVisible\", { scrollTop });\r\n            };\r\n\r\n            node.addEventListener(\"scroll\", onscroll);\r\n            return {\r\n                destroy() {\r\n                    node.removeEventListener(\"scroll\", onscroll, false);\r\n                }\r\n            };\r\n        },\r\n        horizontalScrollListener(node) {\r\n            const { scrollables } = this.get();\r\n            scrollables.push({ node, orientation: \"horizontal\" });\r\n        }\r\n    },\r\n    methods: {\r\n        onresize({ left }) {\r\n            this.store.set({tableWidth: left});\r\n            setTimeout(() => {\r\n                this.refreshTasks();\r\n            }, 0);\r\n        },\r\n        refreshTasksDebounced() {\r\n            if(!this._refreshTasksDebounced) {\r\n                this._refreshTasksDebounced = debounce(() => { this.refreshTasks(); }, 250, false);\r\n            }\r\n\r\n            this._refreshTasksDebounced();\r\n        },\r\n        onwheel(e) {\r\n            if (e.ctrlKey) {\r\n                e.preventDefault();\r\n                const { width, minWidth, zoom, zoomLevels } = this.store.get();\r\n                this.set({ zooming: true });\r\n\r\n                let columnOptions = {\r\n                    columnUnit: \"minute\",\r\n                    columnOffset: 15,\r\n                    minWidth\r\n                };\r\n\r\n                let newZoom = zoom;\r\n                if (event.deltaY > 0) {\r\n                    newZoom--;\r\n                } else {\r\n                    newZoom++;\r\n                }\r\n\r\n                if (zoomLevels[newZoom]) {\r\n                    Object.assign(columnOptions, zoomLevels[newZoom], { zoom: newZoom });\r\n                }\r\n\r\n                const scale = columnOptions.minWidth / width;\r\n                const node = this.refs.mainContainer;\r\n                const mousepos = getRelativePos(node, e);\r\n                const before = node.scrollLeft + mousepos.x;\r\n                const after = before * scale;\r\n                const scrollLeft = after - mousepos.x;\r\n\r\n                this.store.set(columnOptions);\r\n                this.root.api.gantt.raise.viewChanged();\r\n                node.scrollLeft = scrollLeft;\r\n                this.stoppedZooming();\r\n                this.refreshTasks();\r\n            }\r\n        },\r\n        onWindowResizeEventHandler(event) {\r\n            if (this.store.get().stretchTimelineWidthToFit) {\r\n                this.refreshTasks();\r\n            }\r\n        },\r\n        adjustVisibleDateRange({ from, to, unit }) {\r\n            this.store.set({\r\n                from: from.clone(),\r\n                to: to.clone()\r\n            });\r\n            this.refreshTasks();\r\n        },\r\n        initRows(rowsData) {\r\n            const rows = this.rowFactory.createRows(rowsData);\r\n            this.store.addAllRow(rows);\r\n        },\r\n        initTasks(taskData) {\r\n            const tasks = this.taskFactory.createTasks(taskData);\r\n            this.store.addAllTask(tasks);\r\n        },\r\n        initTimeRanges(timeRangeData) {\r\n            const timeRangeMap = {};\r\n\r\n            for (let i = 0; i < timeRangeData.length; i++) {\r\n                const currentTimeRange = timeRangeData[i];\r\n                const timeRange = this.timeRangeFactory.create(currentTimeRange);\r\n                timeRangeMap[currentTimeRange.id] = timeRange;\r\n            }\r\n\r\n            this.store.set({ timeRangeMap });\r\n        },\r\n        initGantt() {\r\n            if (!this.store.get().gantt) {\r\n                this.store.set({\r\n                    bodyElement: this.refs.mainContainer,\r\n                    rowContainerElement: this.refs.rowContainer,\r\n                    gantt: this\r\n                });\r\n\r\n                this.selectionManager = new SelectionManager(this.store);\r\n                this.utils = new GanttUtils(this.store);\r\n                this.api = new GanttApi();\r\n                this.rowFactory = new RowFactory(this.store);\r\n                this.dndManager = new DragDropManager(this.store);\r\n                this.columnService = new ColumnService(this);\r\n                this.timeRangeFactory = new TimeRangeFactory(this.columnService);\r\n\t\t\t\tthis.taskFactory = new TaskFactory(this.columnService, this.store);\r\n\t\t\t\t\r\n                this.api.registerEvent(\"tasks\", \"move\");\r\n                this.api.registerEvent(\"tasks\", \"select\");\r\n                this.api.registerEvent(\"tasks\", \"switchRow\");\r\n                this.api.registerEvent(\"tasks\", \"moveEnd\");\r\n                this.api.registerEvent(\"tasks\", \"changed\");\r\n\r\n                this.api.registerEvent(\"gantt\", \"viewChanged\");\r\n            }\r\n        },\r\n        initModule(module) {\r\n            const moduleOptions = Object.assign(\r\n            {\r\n                _gantt: this,\r\n                _options: this.get()\r\n            }, {}); //merge with module specific data, modules[module.constructor.key]);\r\n            module.initModule(moduleOptions);\r\n\r\n            const { _modules } = this.get();\r\n            _modules.push(module);\r\n        },\r\n        broadcastModules(event, data) {\r\n            const { _modules } = this.get();\r\n            _modules.forEach(module => {\r\n                if (typeof module[event] === \"function\") {\r\n                    module[event](data);\r\n                }\r\n            });\r\n        },\r\n        updateVisibleEntities() {\r\n            const { timeRangeMap } = this.store.get();\r\n            for (const id in timeRangeMap) {\r\n                const timeRange = timeRangeMap[id];\r\n\r\n                const newLeft = this.root.columnService.getPositionByDate(timeRange.model.from) | 0;\r\n                const newRight = this.root.columnService.getPositionByDate(timeRange.model.to) | 0;\r\n\r\n                timeRange.left = newLeft;\r\n                timeRange.width = newRight - newLeft;\r\n            }\r\n\r\n            this.store.set({ timeRangeMap });\r\n        },\r\n        refreshTasks() {\r\n            const { allTasks } = this.store.get();\r\n            allTasks.forEach(task => {\r\n                const newLeft = this.root.columnService.getPositionByDate(task.model.from) | 0;\r\n                const newRight = this.root.columnService.getPositionByDate(task.model.to) | 0;\r\n\r\n                task.left = newLeft;\r\n                task.width = newRight - newLeft;\r\n            });\r\n            this.store.set({ taskMap: this.store.get().taskMap });\r\n            this.updateVisibleEntities();\r\n        },\r\n        updateView(options) {\r\n            // {from, to, headers, width}\r\n            this.store.set(options);\r\n\r\n            this.refreshTasks();\r\n\r\n            this.broadcastModules(\"updateView\", options); //{ from, to, headers });\r\n        },\r\n        selectTask(id) {\r\n            const { taskMap } = this.get();\r\n            const task = taskMap[id];\r\n            if (task) {\r\n                this.selectionManager.selectSingle(task);\r\n            }\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            scrollables: [],\r\n            visibleRows: [],\r\n            visibleTasks: [],\r\n            _ganttBodyModules: [],\r\n            _ganttTableModules: [],\r\n            _modules: [],\r\n\r\n            columns: [],\r\n\r\n            rows: [],\r\n\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n            Task,\r\n            Milestone,\r\n\r\n            zooming: false\r\n        };\r\n    },\r\n    computed: {\r\n        rightScrollbarVisible: ({ $visibleHeight, rowContainerHeight }) => rowContainerHeight > $visibleHeight,\r\n\r\n        rowContainerHeight: ({ $allRows, $rowHeight }) => $allRows.length * $rowHeight,\r\n        startIndex: ({ $scrollTop, $rowHeight }) => Math.floor($scrollTop / $rowHeight),\r\n        endIndex: ({ startIndex, $visibleHeight, $rowHeight, $allRows }) => Math.min(startIndex + Math.ceil($visibleHeight / $rowHeight), $allRows.length - 1),\r\n        paddingTop: ({ startIndex, $rowHeight }) => startIndex * $rowHeight,\r\n        paddingBottom: ({ $allRows, endIndex, $rowHeight }) => ($allRows.length - endIndex - 1) * $rowHeight,\r\n\r\n        visibleRows: ({ $allRows, startIndex, endIndex }) => $allRows.slice(startIndex, endIndex + 1),\r\n        visibleTasks: ({ $taskMap, visibleRows, rowTaskMap }) => {\r\n            const visibleTasks = [];\r\n            visibleRows.forEach(row => {\r\n                if (!rowTaskMap[row.model.id]) return;\r\n\r\n                rowTaskMap[row.model.id].forEach(id => {\r\n                    visibleTasks.push($taskMap[id]);\r\n                });\r\n            });\r\n            return visibleTasks;\r\n        },\r\n\r\n        /**\r\n         * Calculates map containing [key: row id]: list of task ids\r\n         */\r\n        rowTaskMap: ({ $allTasks }) => {\r\n            const reducer = (cache, task) => {\r\n                if (!cache[task.model.resourceId]) cache[task.model.resourceId] = [];\r\n\r\n                cache[task.model.resourceId].push(task.model.id);\r\n                return cache;\r\n            };\r\n            return $allTasks.reduce(reducer, {});\r\n        }\r\n    }\r\n  };\r\n</script>",
    "<div class=\"sg-table sg-view\" style=\"width:{tableWidth}px;\">\r\n    <div class=\"sg-table-header\" ref:sideHeaderContainer style=\"height:{$headerHeight}px\">\r\n        {#each $tableHeaders as header}\r\n            <div class=\"sg-table-header-cell sg-table-cell\"> <!--style=\"width:{header.width}px\"-->\r\n                {header.title}\r\n            </div>\r\n        {/each}\r\n    </div>\r\n\r\n    <div class=\"sg-table-body\" class:bottom-scrollbar-visible=\"bottomScrollbarVisible\">\r\n        <div class=\"sg-table-scroller\" ref:scrollable>\r\n            <div class=\"sg-table-rows\" style=\"padding-top:{paddingTop}px;padding-bottom:{paddingBottom}px;height:{rowContainerHeight}px;\"> \r\n                {#each visibleRows as row (row.model.id)}\r\n                    <TableRow\r\n                        row={row}\r\n                        headers={$tableHeaders}/>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n\r\n    /* This class should take into account varying widths of the scroll bar */\r\n    .bottom-scrollbar-visible {\r\n        padding-bottom: 17px;\r\n    }\r\n\r\n    .sg-table {\r\n        overflow-x: auto;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .sg-table-scroller {\r\n        width: 100%;\r\n        border-bottom: 1px solid #efefef; \r\n        overflow: hidden;\r\n    }\r\n\r\n    .sg-table-header {\r\n        display: flex;\r\n        align-items: stretch;\r\n        width: 100%;\r\n    }\r\n\r\n    .sg-table-rows {\r\n        \r\n    }\r\n\r\n    .sg-table-body {\r\n        display: flex;\r\n        flex: 1 1 0;\r\n        width: 100%;\r\n        overflow-y: hidden;\r\n    }\r\n\r\n    .sg-table-header-cell {\r\n        font-size: 14px;\r\n        font-weight: 400;\r\n    }\r\n\r\n    :global(.sg-table-cell){\r\n        flex: 1;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        \r\n        display: flex;\r\n        align-items: center;\r\n\r\n        padding: 0 .5em;\r\n        height: 100%;\r\n    }\r\n\r\n    :global(.sg-table-cell:last-child) {\r\n        flex-grow: 1;\r\n    }\r\n</style>\r\n<script>\r\n    import TableRow from './TableRow.html';\r\n    import { H_SCROLLBAR_WIDTH } from 'src/core/constants';\r\n\r\n    export default {\r\n        setup(component) {\r\n            component.type = 'table';\r\n\r\n            component.defaults = {\r\n                // list of columns used in the table\r\n                // title: label to display in the header\r\n                // property: property of row to display in the cell\r\n                // width: width of column\r\n                tableHeaders: [{ title: 'Name', property: 'label', width: 100 }],\r\n                // total width of the table, if width is smaller than sum of column widths, a scrollbar shows\r\n                tableWidth: 100\r\n            }\r\n        },\r\n        components: { TableRow },\r\n        oncreate() {\r\n            this.fire('init', { module: this });\r\n        },\r\n        methods: {\r\n            initModule(options) {\r\n                this.set(options);\r\n                const { _gantt } = this.get();\r\n                const { scrollables } = _gantt.get();\r\n                scrollables.push({ node: this.refs.scrollable });\r\n            },\r\n            onGanttCreated() {\r\n                const { _gantt } = this.get();\r\n            }\r\n        },\r\n        computed: {\r\n            scrollWidth: ({ $tableHeaders }) => {\r\n                let sum = 0;\r\n                $tableHeaders.forEach(header => {\r\n                    sum += header.width;\r\n                });\r\n                return sum;\r\n            },\r\n            bottomScrollbarVisible: ({ $visibleWidth, $width }) => $width > $visibleWidth\r\n        }\r\n    }\r\n</script>",
    "<div class=\"dependency-container\">\r\n    {#each visibleDependencies as dependency (dependency.id)}\r\n        <Dependency {...dependency}/>\r\n    {/each}\r\n</div>\r\n\r\n<style>\r\n    .dependency-container {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        \r\n        pointer-events: none;\r\n        top: 0;\r\n        float: left;\r\n        overflow: hidden;\r\n        z-index: 0;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    import Dependency from './Dependency.html';\r\n\r\n    export default {\r\n        components: { Dependency },\r\n        setup(component) {\r\n            component.type = 'body';\r\n        },\r\n        data() {\r\n            return {\r\n                visibleDependencies: []\r\n            }\r\n        },\r\n        computed: {\r\n            visibleDependencies: ({ paddingTop, $dependencies, $visibleHeight, $taskMap }) => {\r\n                const result = [];\r\n                for (let i = 0; i < $dependencies.length; i++) {\r\n                    const dependency = $dependencies[i];\r\n\r\n                    const fromTask = $taskMap[dependency.fromId];\r\n                    const toTask = $taskMap[dependency.toId];\r\n                    if (fromTask && (fromTask.top > paddingTop && fromTask.top <= paddingTop + $visibleHeight)) {\r\n                        result.push(dependency);\r\n                    } else if (toTask && (toTask.top > paddingTop && toTask.top <= paddingTop + $visibleHeight)) {\r\n                        result.push(dependency);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n    };\r\n</script>",
    "<div ref:taskElement\r\n    class=\"sg-task {model.classes}\" \r\n    style=\"\r\n    width:{currWidth}px;\r\n    height:{height}px;\r\n    transform: translate({x}px, {y}px);\"\r\n    use:drag \r\n    on:click=\"select(event)\"\r\n    class:selected=\"selected\"\r\n    class:moving=\"dragging||resizing\"\r\n    class:animating=\"animating\">\r\n    <div class=\"sg-task-background\" style=\"width:{model.amountDone}%\"></div>\r\n    <div class=\"sg-task-content\">\r\n        {#if model.html}\r\n            {@html model.html}\r\n        {:elseif $taskContent}\r\n            {@html $taskContent(this)}\r\n        {:else}\r\n            {model.label}\r\n        {/if}\r\n        <!-- <span class=\"debug\">x:{x} y:{y}, x:{left} y:{top}</span> -->\r\n        {#if model.showButton}\r\n            <span class=\"sg-task-button {model.buttonClasses}\" on:click=\"onclick(event)\">\r\n                {@html model.buttonHtml}\r\n            </span>\r\n        {/if}\r\n    </div>\r\n\r\n    {#if model.labelBottom}\r\n        <label class=\"sg-label-bottom\">\r\n            {model.labelBottom}\r\n        </label>\r\n    {/if}\r\n</div>\r\n\r\n<style>\r\n\r\n    .sg-label-bottom {\r\n        position: absolute;\r\n        top: calc(100% + 10px);\r\n        color: #888;\r\n    }\r\n\r\n\r\n    .debug {\r\n        position: absolute;\r\n        top: -10px;\r\n        right: 0;\r\n        font-size:8px;\r\n        color: black;\r\n    }\r\n\r\n    .sg-task {\r\n\t\tposition: absolute;     \r\n        top: 0;\r\n        bottom: 0;\r\n\r\n        white-space: nowrap;\r\n        /* overflow: hidden; */\r\n\r\n        transition: background-color 0.2s, opacity 0.2s;\r\n\t}\r\n\r\n    .sg-task-background {\r\n        position: absolute;\r\n        height: 100%;\r\n        top: 0;\r\n    }\r\n\r\n    .sg-task-content {\r\n        position: absolute;\r\n        height: 100%;\r\n        top: 0;\r\n\r\n        \r\n        padding-left: 14px;\r\n        font-size: 14px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n    }\r\n\r\n    /* .sg-task:not(.moving) {\r\n        transition: transform 0.2s, background-color 0.2s, width 0.2s;\r\n    } */\r\n\r\n    .sg-task.animating:not(.moving) {\r\n        transition: transform 0.2s, background-color 0.2s, width 0.2s;\r\n    }\r\n\r\n    .sg-task.moving{\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-task:hover::before {\r\n        content: '';\r\n        width: 4px;\r\n        height: 50%;\r\n        top: 25%;\r\n        position: absolute;\r\n        cursor: ew-resize;\r\n        border-style: solid;\r\n        border-color: rgba(255, 255, 255, 0.5);\r\n            \r\n        margin-left: 3px;\r\n        left: 0;\r\n        border-width: 0 1px;\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-task:hover::after {\r\n        content: '';\r\n        width: 4px;\r\n        height: 50%;\r\n        top: 25%;\r\n        position: absolute;\r\n        cursor: ew-resize;\r\n        border-style: solid;\r\n        border-color: rgba(255, 255, 255, 0.5);\r\n\r\n        margin-right: 3px;\r\n        right: 0;\r\n        border-width: 0 1px;\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-task.selected {\r\n        outline: 2px solid rgba(3, 169, 244, 0.5);\r\n        outline-offset: 3px;\r\n        z-index: 1;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    import { setCursor } from \"src/utils/domUtils\";\r\n    import { Draggable, ComponentPosProvider } from \"src/core/drag\";\r\n\r\n    export default {\r\n        onstate({ changed, current, previous }) {\r\n            if((changed.left || changed.width || changed.top) && !current.dragging && !current.resizing){\r\n                this.set({\r\n                    x: current.left,\r\n                    currWidth: current.width,\r\n                    y: current.top\r\n                });\r\n                // should NOT animate on resize/update of columns\r\n            }\r\n\t\t},\r\n        actions: {\r\n\t\t\tdrag(node) {\r\n                const { rowContainerElement, resizeHandleWidth } = this.store.get();\r\n\r\n                const ondrop = ({ x, y, currWidth, event, dragging, resizing }) => {\r\n                    const { model } = this.get();\r\n                    const { taskMap, rowMap, rowPadding } = this.store.get();\r\n\r\n                    let rowChangeValid = true;\r\n                    //row switching\r\n                    if(dragging){\r\n                        const sourceRow = rowMap[model.resourceId];\r\n                        const targetRow = this.root.dndManager.getTarget('row', event);\r\n                        if(targetRow){\r\n                            model.resourceId = targetRow.model.id;\r\n                            this.root.api.tasks.raise.switchRow(this, targetRow, sourceRow);\r\n                        }\r\n                        else{\r\n                            rowChangeValid = false;\r\n                        }\r\n                    }\r\n                    \r\n                    this.set({dragging: false, resizing: false});\r\n\r\n                    const task = taskMap[model.id];\r\n\r\n                    if(rowChangeValid) {\r\n                        const newFrom = this.root.utils.roundTo(this.root.columnService.getDateByPosition(x));\r\n                        const newTo = this.root.utils.roundTo(this.root.columnService.getDateByPosition(x+currWidth));\r\n                        const newLeft = this.root.columnService.getPositionByDate(newFrom) | 0;\r\n                        const newRight = this.root.columnService.getPositionByDate(newTo) | 0;\r\n\r\n                        Object.assign(model, {\r\n                            from: newFrom,\r\n                            to: newTo\r\n                        });\r\n\r\n                        const left = newLeft;\r\n                        const width = newRight - newLeft;\r\n                        const top = rowPadding + rowMap[model.resourceId].y;\r\n                        \r\n                        this.store.updateTask({\r\n                            ...task,\r\n                            left,\r\n                            width,\r\n                            top,\r\n                            model\r\n                        });\r\n\r\n                        this.set({\r\n                            x: left,\r\n                            currWidth: width,\r\n                            y: top,\r\n                        });\r\n                    }\r\n                    else {\r\n                        // reset position\r\n                        this.set({\r\n                            x: task.left,\r\n                            currWidth: task.width,\r\n                            y: task.top,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                const draggable = new Draggable(node, {\r\n                    onDown: ({dragging, resizing}) => {\r\n                        //this.set({dragging, resizing});\r\n                        if(dragging) {\r\n                            setCursor('move');\r\n                        }\r\n                        if(resizing) {\r\n                            setCursor('e-resize');\r\n                        }\r\n                    }, \r\n                    onMouseUp: () => {\r\n                        setCursor('default');\r\n                    },\r\n                    onResize: (state) => {\r\n                        this.set({...state, resizing: true});\r\n                    }, \r\n                    onDrag: ({x, y}) => {\r\n                        this.set({x, y, dragging: true});\r\n                    }, \r\n                    dragAllowed: () => {\r\n                        const { model } = this.get();\r\n                        const { rowMap } = this.store.get();\r\n                        const row = rowMap[model.resourceId];\r\n                        return row.model.enableDragging && model.enableDragging\r\n                    },\r\n                    resizeAllowed: () => {\r\n                        const { model } = this.get();\r\n                        const { rowMap } = this.store.get();\r\n                        const row = rowMap[model.resourceId];\r\n                        return row.model.enableDragging && model.enableDragging\r\n                    },\r\n                    onDrop: ondrop, \r\n                    container: rowContainerElement, \r\n                    resizeHandleWidth\r\n                }, new ComponentPosProvider(this));\r\n                return {\r\n                    destroy() { draggable.destroy(); }\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            select(event){\r\n                const { model } = this.get();\r\n                if(event.ctrlKey){\r\n                    this.root.selectionManager.toggleSelection(model.id);\r\n                }\r\n                else{\r\n                    this.root.selectionManager.selectSingle(model.id);\r\n                }\r\n                \r\n                if(this.get().selected){\r\n                    this.root.api.tasks.raise.select(model);\r\n                }\r\n            },\r\n            onclick(event){\r\n                const { onTaskButtonClick } = this.store.get();\r\n                if(onTaskButtonClick) {\r\n                    event.stopPropagation();\r\n                    const { task } = this.get();\r\n                    onTaskButtonClick(task);\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                dragging: false,\r\n                selected: false,\r\n                resizing: false,\r\n                animating: true\r\n            }\r\n        },\r\n        computed: {\r\n            selected: ({$selection, model}) => $selection.indexOf(model.id) !== -1,\r\n            row: ({$rowMap, model}) => $rowMap[model.resourceId]\r\n        }\r\n    };\r\n</script>",
    "<div class=\"sg-row {row.model.classes}\" ref:row style=\"height:{$rowHeight}px\" data-row-id=\"{row.model.id}\">\r\n    {#if row.model.contentHtml}\r\n        {@html row.model.contentHtml}\r\n    {/if}\r\n</div>    \r\n<style>\r\n    .sg-row {\r\n        position: relative;\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n    }\r\n</style>\r\n<script>\r\n    export default {\r\n        \r\n    };\r\n</script>",
    "<div ref:milestoneElement\r\n    class=\"sg-milestone {model.classes}\" \r\n    style=\"transform: translate({x}px, {y}px);height:{height}px;width:{height}px\"\r\n    use:drag \r\n    on:click=\"select(event)\"\r\n    class:selected=\"selected\"\r\n    class:moving=\"dragging\">\r\n    <div class=\"inside\"></div>\r\n        <!-- <span class=\"debug\">x:{x|0} y:{y|0}, x:{left|0} y:{top|0}</span> -->\r\n</div>\r\n\r\n<style>\r\n    .sg-milestone {\r\n\t\tposition: absolute;     \r\n        top: 0;\r\n        bottom: 0;\r\n\r\n        white-space: nowrap;\r\n        /* overflow: hidden; */\r\n\r\n        height: 20px;\r\n        width: 20px;\r\n\r\n        min-width: 40px;\r\n        margin-left: -20px;\r\n        display: flex;\r\n        align-items: center;\r\n        flex-direction: column;\r\n\r\n        transition: background-color 0.2s, opacity 0.2s;\r\n    }\r\n\r\n    .sg-milestone .inside {\r\n        position: relative;\r\n    }\r\n\r\n    .sg-milestone .inside:before {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        content: ' ';\r\n        height: 28px;\r\n        width: 28px;\r\n        transform-origin: 0 0;\r\n        transform: rotate(45deg); \r\n        /* //after -45 */\r\n        background-color: #feac31;\r\n        border-color: #feac31;\r\n    }\r\n\r\n    .sg-milestone:not(.moving) {\r\n        transition: transform 0.2s, background-color 0.2s, width 0.2s;\r\n    }\r\n\r\n    .sg-milestone.moving{\r\n        z-index: 1;\r\n    }\r\n\r\n    .sg-milestone.selected {\r\n        outline: 2px solid rgba(3, 169, 244, 0.5);\r\n        outline-offset: 3px;\r\n        z-index: 1;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    import { Draggable, ComponentPosProvider } from \"src/core/drag\";\r\n\r\n    export default {\r\n        oncreate(){\r\n        },\r\n        onstate({ changed, current, previous }) {\r\n            if(!previous) {\r\n                this.onmount();\r\n            }\r\n\r\n            else if(!current.dragging){\r\n                this.set({\r\n                    x: current.left,\r\n                    y: current.top,\r\n                });\r\n            }\r\n\t\t},\r\n        actions: {\r\n\t\t\tdrag(node) {\r\n                const { rowContainerElement } = this.store.get();\r\n\r\n                const ondrop = ({ x, y, currWidth, event, dragging }) => {\r\n                    const { model } = this.get();\r\n                    const { taskMap, rowMap, rowPadding } = this.store.get();\r\n\r\n                    let rowChangeValid = true;\r\n                    //row switching\r\n                    if(dragging){\r\n                        const sourceRow = rowMap[model.resourceId];\r\n                        const targetRow = this.root.dndManager.getTarget('row', event);\r\n                        if(targetRow){\r\n                            model.resourceId = targetRow.model.id;\r\n                            this.root.api.tasks.raise.switchRow(this, targetRow, sourceRow);\r\n                        }\r\n                        else{\r\n                            rowChangeValid = false;\r\n                        }\r\n                    }\r\n                    \r\n                    this.set({dragging: false});\r\n                    const task = taskMap[model.id];\r\n                    if(rowChangeValid) {\r\n                        const newFrom = this.root.utils.roundTo(this.root.columnService.getDateByPosition(x)); \r\n                        const newLeft = this.root.columnService.getPositionByDate(newFrom);\r\n\r\n                        Object.assign(model, {\r\n                            from: newFrom\r\n                        });\r\n                        \r\n                        this.store.updateTask({\r\n                            ...task,\r\n                            left: newLeft,\r\n                            top: rowPadding + rowMap[model.resourceId].y,\r\n                            model\r\n                        });\r\n                    }\r\n                    else {\r\n                        // reset position\r\n                        this.store.updateTask({\r\n                            ...task\r\n                        });\r\n                    }\r\n                }\r\n\r\n                const draggable = new Draggable(node, {\r\n                    onDown: ({x, y}) => {\r\n                        //this.set({x, y});\r\n                    }, \r\n                    onDrag: ({x, y}) => {\r\n                        this.set({x, y, dragging: true});\r\n                    },\r\n                    dragAllowed: () => {\r\n                        const { model } = this.get();\r\n                        const { rowMap } = this.store.get();\r\n                        const row = rowMap[model.resourceId];\r\n                        return row.model.enableDragging && model.enableDragging\r\n                    },\r\n                    resizeAllowed: false,\r\n                    onDrop: ondrop, \r\n                    container: rowContainerElement, \r\n                }, new ComponentPosProvider(this));\r\n\r\n                return {\r\n                    destroy() { draggable.destroy(); }\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            onmount() {\r\n                const { model } = this.get();\r\n\r\n                const left = this.root.columnService.getPositionByDate(model.from);\r\n                const top = this.store.get().rowMap[model.resourceId].y + this.store.get().rowPadding;\r\n                const height = this.store.get().rowMap[model.resourceId].height - 2 * this.store.get().rowPadding;\r\n\r\n                this.set({\r\n                    left,\r\n                    top,\r\n                    height,\r\n                    x: left,\r\n                    y: top\r\n                });\r\n            },\r\n            select(event){\r\n                const { model } = this.get();\r\n                if(event.ctrlKey){\r\n                    this.root.selectionManager.toggleSelection(model.id);\r\n                }\r\n                else{\r\n                    this.root.selectionManager.selectSingle(model.id);\r\n                }\r\n                \r\n                if(this.get().selected){\r\n                    this.root.api.tasks.raise.select(model);\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                dragging: false,\r\n                selected: false,\r\n\r\n                x: null,\r\n                y: null,\r\n                height: 20\r\n            }\r\n        },\r\n        computed: {\r\n            selected: ({$selection, model}) => $selection.indexOf(model.id) !== -1,\r\n            row: ({$rowMap, model}) => $rowMap[model.resourceId]\r\n        }\r\n    };\r\n</script>",
    "<div class=\"sg-time-range\" class:moving=\"resizing\" style=\"width:{currWidth}px;left:{x}px\">\r\n    <div class=\"sg-time-range-label\">{model.label}</div>\r\n</div>\r\n<style>\r\n    .sg-time-range {\r\n        height: 100%;\r\n        position: absolute;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n\r\n        background-image: linear-gradient(-45deg, rgba(0, 0, 0, 0) 46%, #e03218 49%, #e03218 51%, rgba(0, 0, 0, 0) 55%);\r\n        background-size: 6px 6px !important;\r\n        color: red;\r\n        font-weight: 400;\r\n    }\r\n\r\n    .sg-time-range-label {\r\n        margin-top: 10px;\r\n        background: #fff;\r\n        white-space: nowrap;\r\n        padding: 4px;\r\n        font-weight: 400;\r\n        font-size: 10px;\r\n    }\r\n</style>\r\n<script>\r\n    export default {\r\n        onstate({ changed, current, previous }) {\r\n            if(!current.resizing){\r\n                this.set({\r\n                    x: current.left,\r\n                    currWidth: current.width\r\n                });\r\n            }\r\n        },\r\n        data(){\r\n            return {\r\n                resizing: false,\r\n                currWidth: null,\r\n                x: null\r\n            }\r\n        }\r\n    }\r\n</script>",
    "<div class=\"sg-time-range-control\" style=\"width:{currWidth}px;left:{x}px\">\r\n    <div class=\"sg-time-range-handle-left\" use:drag></div>\r\n    <div class=\"sg-time-range-handle-right\" use:drag></div>\r\n</div>\r\n<style>\r\n    .sg-time-range-control {\r\n        position: absolute;\r\n    }\r\n\r\n    .sg-time-range-handle-left {\r\n        position: absolute;\r\n        left: 0;\r\n    }\r\n\r\n    .sg-time-range-handle-right {\r\n        position: absolute;\r\n        right: 0;\r\n    }\r\n\r\n    .sg-time-range-handle-left::before, .sg-time-range-handle-right::before {\r\n        position: absolute;\r\n        content: '';\r\n        bottom: 4px;\r\n        border-radius: 6px 6px 6px 0;\r\n        border: 2px solid #b0b0b7;\r\n        width: 9px;\r\n        height: 9px;\r\n        transform: translateX(-50%) rotate(-45deg);\r\n        background-color: #fff;\r\n\r\n        border-color: #e03218;\r\n        cursor: ew-resize;\r\n    }\r\n</style>\r\n<script>\r\n    import { Draggable, ComponentPosProvider } from \"src/core/drag\";\r\n\r\n    export default {\r\n        onstate({ changed, current, previous }) {\r\n            if(!current.resizing){\r\n                this.set({\r\n                    x: current.left,\r\n                    currWidth: current.width\r\n                });\r\n            }\r\n\t\t},\r\n        actions: {\r\n            drag(node) {\r\n                const { rowContainerElement, resizeHandleWidth } = this.store.get();\r\n\r\n                const ondrop = ({ x, currWidth, event }) => {\r\n                    const { model } = this.get();\r\n                    \r\n                    const newFrom = this.root.utils.roundTo(this.root.columnService.getDateByPosition(x)); \r\n                    const newTo = this.root.utils.roundTo(this.root.columnService.getDateByPosition(x+currWidth));\r\n                    const newLeft = this.root.columnService.getPositionByDate(newFrom);\r\n                    const newRight = this.root.columnService.getPositionByDate(newTo);\r\n                    \r\n                    Object.assign(model, {\r\n                        from: newFrom,\r\n                        to: newTo\r\n                    });\r\n\r\n                    var state = {\r\n                        resizing: false,\r\n                        left: newLeft,\r\n                        width: newRight - newLeft,\r\n                        model\r\n                    }\r\n\r\n                    updateEntity(state);\r\n                    window.removeEventListener('mousemove', onmousemove, false);\r\n                };\r\n                \r\n                const updateEntity = (state) => {\r\n                    const { model } = this.get();\r\n                    const { timeRangeMap } = this.store.get();\r\n                    const entity = timeRangeMap[model.id];\r\n                    this.store.updateTimeRange({...entity, ...state});\r\n                }\r\n\r\n                return new Draggable(node, {\r\n                    onDown: (state) => {\r\n                        updateEntity({...state, resizing: true});\r\n                    }, \r\n                    onResize: ({x, currWidth}) => {\r\n                        updateEntity({x, currWidth});\r\n                    },\r\n                    dragAllowed: false,\r\n                    resizeAllowed: true,\r\n                    onDrop: ondrop, \r\n                    container: rowContainerElement, \r\n                    resizeHandleWidth\r\n                }, new ComponentPosProvider(this));\r\n            }\r\n        },\r\n        data(){\r\n            return {\r\n                resizing: false,\r\n                currWidth: null,\r\n                x: null\r\n            }\r\n        }\r\n    }\r\n</script>",
    "<div class=\"column\" style=\"width:{width}px;left:{left}px\"></div>\r\n<style>\r\n    .column {\r\n        position: absolute;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n    }\r\n</style>\r\n<script>\r\n    /**\r\n     * Column rendered inside gantt body background \r\n     */\r\n    export default {\r\n        \r\n    }\r\n</script>",
    "<div class=\"column-header-row\">\r\n    {#each headers as header}\r\n        <div class=\"column-header\" style=\"width:{header.width}px\" on:click=\"fire('selectDateTime', { from: header.from, to: header.to, unit: header.unit })\">\r\n            {header.label || 'N/A'}\r\n        </div>\r\n    {/each}\r\n</div>\r\n<style>\r\n    .column-header-row {\r\n        box-sizing: border-box;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n\r\n        height: 32px;\r\n    }\r\n\r\n    .column-header {\r\n        position: relative;\r\n        display: inline-block;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n        text-overflow: clip;\r\n        /* vertical-align: top; */\r\n        text-align: center;\r\n\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 1em;    \r\n        font-size: 14px;\r\n        font-weight: 300;\r\n        transition: background 0.2s;\r\n\r\n        cursor: pointer;     \r\n        user-select: none;\r\n    }\r\n\r\n    .column-header:hover {\r\n        background: #f9f9f9;\r\n    }\r\n    \r\n</style>\r\n<script>\r\n    import * as moment from 'moment';\r\n\r\n    /**\r\n     * A row of header cells rendered in header\r\n     */\r\n    export default {\r\n        data(){\r\n            return {\r\n                headers: [],\r\n                width: null,\r\n\r\n                baseWidth: null,\r\n                baseDuration: null,\r\n            }\r\n        },\r\n        computed: {\r\n            /**\r\n             * Width of each header cell\r\n             */\r\n            columnWidth: ({header, baseWidth, baseDuration}) => {\r\n                const offset = header.offset || 1;\r\n                const duration = moment.duration(offset, header.unit).asMilliseconds();\r\n                const ratio = duration / baseDuration;\r\n                return baseWidth * ratio;\r\n            },\r\n\r\n            /**\r\n             * Number of header cells\r\n             */\r\n            columnCount: ({$width, columnWidth}) => Math.ceil($width / columnWidth),\r\n\r\n            /**\r\n             * Computes array of header cells\r\n             */\r\n            headers: ({$from, columnWidth, columnCount, header, $width}) => {\r\n\r\n                const headers = [];\r\n                let headerTime = $from.clone().startOf(header.unit);\r\n                const offset = header.offset || 1;\r\n\r\n                for(let i = 0; i < columnCount; i++){\r\n                    headers.push({\r\n                        width: Math.min(columnWidth, $width), \r\n                        label: headerTime.format(header.format),\r\n                        from: headerTime.clone(),\r\n                        to: headerTime.clone().add(offset, header.unit),\r\n                        unit: header.unit\r\n                    });\r\n                    headerTime.add(offset, header.unit);\r\n                }\r\n                return headers;\r\n            }\r\n        }\r\n    };\r\n</script>",
    "<div class=\"sg-columns\">\r\n\t{#each columns as column}\r\n\t<Column {...column} />\r\n\t{/each}\r\n</div>\r\n<style>\r\n    .sg-columns {\r\n      position: absolute;\r\n      height: 100%;\r\n      width: 100%;\r\n      overflow: hidden;\r\n    }\r\n</style>\r\n<script>\r\n    import Column from './Column.html';\r\n    import { findByPosition } from '../core/column';\r\n    import { getPositionByDate } from '../utils/utils';\r\n\r\n    /**\r\n     * Container component for columns rendered as gantt body background\r\n     */\r\n    export default {\r\n        components: { Column },\r\n        onstate({current, changed, previous}) {\r\n            if(changed.columns) {\r\n                this.fire('columnsGenerated')\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                columns: []\r\n            };\r\n        },\r\n        computed: {\r\n            columnWidth: ({ $from, $to, $width, $columnOffset, $columnUnit }) => getPositionByDate( $from.clone().add($columnOffset, $columnUnit), $from, $to, $width) | 0,\r\n            columnCount: ({ $width, columnWidth }) => Math.ceil($width / columnWidth),\r\n            columns: ({$from, columnWidth, columnCount, $columnOffset, $columnUnit, $to, $width}) => {\r\n                const columns = [];\r\n                let columnFrom = $from.clone();\r\n                let left = 0;\r\n                for (let i = 0; i < columnCount; i++) {\r\n                    const from = columnFrom.clone();\r\n                    const to = columnFrom.add($columnOffset, $columnUnit);\r\n                    const duration = to.diff(from, 'milliseconds');\r\n\r\n                    columns.push({\r\n                        width: columnWidth,\r\n                        from,\r\n                        left,\r\n                        duration\r\n                    });\r\n                    left += columnWidth;\r\n                    columnFrom = to;\r\n                }\r\n                return columns;\r\n            },\r\n        }\r\n    };\r\n</script>",
    "<div class=\"context-menu\" style=\"top:{top}px;left:{left}px\" ref:contextMenu>\r\n    {#each actions as action}\r\n        <div class=\"context-option\" on:click=\"execute(event, action)\">{action.label}</div>\r\n    {/each}\r\n</div>\r\n\r\n<style>\r\n    .context-menu {\r\n        position: absolute;\r\n        background: white;\r\n        border: 1px solid #ccc;\r\n        padding: 0.25em 0;\r\n        font-size: 10px;\r\n        transition: opacity 0.4s ease 0s;\r\n        opacity: 1;\r\n        box-shadow: rgba(0, 0, 0, 0.32) 1px 1px 3px 0px;\r\n    }\r\n\r\n    .context-option:hover {\r\n        background: #eee;\r\n    }\r\n\r\n    .context-option {\r\n        cursor: default;\r\n        padding: 0.2em 1em;\r\n    }\r\n</style>\r\n<script>\r\n        export default {\r\n            oncreate() {\r\n                this.position(this.options.position);\r\n                //this.set({ actions: this.options.actions });\r\n            },\r\n            methods: {\r\n                position(point) {\r\n                    this.set({top: point.y, left: point.x});\r\n                },\r\n                execute(event, action) {\r\n                    event.stopPropagation();\r\n                    action.action();\r\n\r\n                    const { onactionend } = this.get();\r\n                    onactionend && onactionend();\r\n                    //close();\r\n                },\r\n                close() {\r\n                    //this.refs.yolo.remove();\r\n                    this.destroy();\r\n                },\r\n                isTarget(event) {\r\n                    return this.refs.contextMenu === event.target;\r\n                }\r\n            },\r\n            data() {\r\n                return {\r\n                    actions: [],\r\n                    top: 0,\r\n                    left: 0,\r\n                    onactionend: null\r\n                }\r\n            }\r\n        };\r\n</script>",
    "<div class=\"sg-resize\" style=\"left:{x}px\" use:resizer></div>\r\n<style>\r\n    .sg-resize {\r\n        z-index: 1;\r\n        background: #e9eaeb;\r\n        width: 5px;\r\n        cursor: col-resize;\r\n        position: absolute;\r\n        height: 100%;\r\n\r\n        transition: width 0.2s, transform 0.2s;\r\n    }\r\n\r\n    .sg-resize:hover {\r\n        transform: translateX(-2px);\r\n        width: 10px;\r\n    }\r\n</style>\r\n<script>\r\n    import { Draggable } from 'src/core/drag/draggable';\r\n    import { ComponentPosProvider } from 'src/core/drag/componentPosProvider';\r\n    import { setCursor } from 'src/utils/domUtils';\r\n\r\n    export default {\r\n        oncreate(){\r\n            this.dragOptions.container =  this.root.refs.ganttElement;\r\n        },\r\n        actions: {\r\n            resizer(node) {\r\n                \r\n                const dragOptions = this.dragOptions = {\r\n                    onDown: ({x, y}) => {\r\n\r\n                    }, \r\n                    onDrag: ({x}) => {\r\n                        this.set({x, dragging: true});\r\n                        this.fire('resize', { left: x });\r\n                        setCursor('col-resize');\r\n\r\n                    },\r\n                    onDrop: ({ x }) => {\r\n                        this.set({x, dragging: false});\r\n                        this.fire('resize', { left: x });\r\n                        setCursor('default');\r\n                    }, \r\n                    dragAllowed: true,\r\n                    resizeAllowed: false,\r\n                    \r\n                    container: this.root.refs.ganttElement, \r\n                }\r\n\r\n                return new Draggable(node, dragOptions, new ComponentPosProvider(this));\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                x: 240\r\n            }\r\n        }\r\n    }\r\n</script>",
    "<div class=\"sg-table-row\" style=\"height:{$rowHeight}px\">\r\n    {#each headers as header}\r\n        <div class=\"sg-table-body-cell sg-table-cell\" > <!--style=\"width:{header.width}px\"-->\r\n            {#if row.model.headerHtml}\r\n                {@html row.model.headerHtml}\r\n            {:elseif header.renderer}\r\n                {@html header.renderer(row)}\r\n            {:elseif header.type === 'resourceInfo'}\r\n                <img class=\"sg-resource-image\" src=\"{row.model.imageSrc}\" alt=\"\"/>\r\n                <div class=\"sg-resource-title\">\r\n                    {row.model[header.property]}\r\n                </div>\r\n            {:else}\r\n                {row.model[header.property]}\r\n            {/if}\r\n        </div>\r\n    {/each}\r\n</div>\r\n<style>\r\n    .sg-table-row {\r\n        display: flex;\r\n        align-items: stretch;\r\n\r\n        position: relative;\r\n\r\n        font-weight: 400;\r\n        font-size: 14px;\r\n    }\r\n\r\n    .sg-table-cell {\r\n    }\r\n\r\n    .sg-resource-image {\r\n        width: 2.4em;\r\n        height: 2.4em;\r\n        border-radius: 50%;\r\n        margin-right: .6em;\r\n\r\n        background: #047c69;\r\n    }\r\n\r\n    .sg-resource-info {\r\n        flex: 1;\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n    }\r\n</style>\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                row: null,\r\n                headers: null\r\n            }\r\n        }\r\n    }\r\n</script>",
    "<div class=\"dependency\" style=\"left:0;top:0\">\r\n    <Arrow startX={fromTask.left + fromTask.width} startY={fromTask.top + fromTask.height / 2} endX={toTask.left}\r\n        endY={toTask.top + toTask.height / 2} />\r\n</div>\r\n\r\n<style>\r\n    .dependency {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n</style>\r\n<script>\r\n    import Arrow from './Arrow.html';\r\n\r\n    export default {\r\n        components: { Arrow },\r\n        computed: {\r\n            fromTask: ({ $taskMap, fromId }) => $taskMap[fromId],\r\n            toTask: ({ $taskMap, toId }) => $taskMap[toId]\r\n        }\r\n    };\r\n</script>",
    "<svg xmlns=\"http://www.w3.org/2000/svg\" shape-rendering=\"crispEdges\" class=\"arrow\" height=\"100%\" width=\"100%\">\r\n    <path d=\"{path}\" {stroke} stroke-width=\"{strokeWidth}\" fill=\"transparent\" class=\"select-area\" />\r\n    <path d=\"{arrowPath}\" fill=\"{stroke}\" />\r\n</svg>\r\n\r\n<style>\r\n    .arrow {\r\n        position: absolute;\r\n        left: 0px;\r\n        pointer-events: none;\r\n    }\r\n\r\n    .select-area {\r\n        pointer-events: visible;\r\n        position: absolute;\r\n    }\r\n</style>\r\n<script>\r\n    // arrow -> start x,y -> end x,y\r\n    // M{startX} {startY} \r\n    // L {startX+width/2} {startY} \r\n    // L {startX+width/2} {startY+height/2}\r\n    // L {startX-width/2} {startY+height/2}\r\n    // L {startX-width/2} {startY+height}\r\n    // L {endX} {endY}\r\n    // transform=\"translate(5,5)\"\r\n\r\n    // startX >= endX\r\n    // M{startX} {startY} \r\n    // L {startX+minLen} {startY} \r\n    // L {startX+minLen} {startY+height/2}\r\n    // L {endX-minLen} {startY+height/2}\r\n    // L {endX-minLen} {endY}\r\n    // L {endX} {endY}\r\n\r\n    // straight\r\n    // M{startX} {startY} \r\n    // L {startX+width/2} {startY} \r\n    // L {startX+width/2} {endY}\r\n    // L {endX-5} {endY}\r\n\r\n    export default {\r\n        oncreate() {\r\n\r\n        },\r\n        data() {\r\n            return {\r\n                strokeWidth: 2,\r\n                arrowSize: 5,\r\n                stroke: 'red',\r\n                minLen: 12\r\n            }\r\n        },\r\n        computed: {\r\n            height: ({ endY, startY }) => (endY - startY),\r\n            width: ({ endX, startX }) => (endX - startX),\r\n            path: function ({ startX, startY, endX, endY, minLen, width, height }) {\r\n                if (startX == NaN || startX == undefined)\r\n                    return 'M0 0';\r\n\r\n                let result;\r\n                if (startX + minLen >= endX && startY != endY) {\r\n                    result = `L ${startX + minLen} ${startY} \r\n                                L ${startX + minLen} ${startY + height / 2}\r\n                                L ${endX - minLen} ${startY + height / 2}\r\n                                L ${endX - minLen} ${endY} `\r\n                }\r\n                else {\r\n                    result = `L ${startX + width / 2} ${startY} \r\n                                L ${startX + width / 2} ${endY}`\r\n                }\r\n\r\n                // -2 so the line doesn't stick out of the arrowhead\r\n                return `M${startX} ${startY}` + result + `L ${endX - 2} ${endY}`\r\n            },\r\n            arrowPath: function ({ endX, endY, arrowSize }) {\r\n                if (endX == NaN || endX == undefined)\r\n                    return 'M0 0';\r\n\r\n                return `M${endX - arrowSize} ${endY - arrowSize} L${endX} ${endY} L${endX - arrowSize} ${endY + arrowSize} Z`\r\n            }\r\n        }\r\n    };\r\n</script>"
  ],
  "names": [],
  "mappings": "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"
}