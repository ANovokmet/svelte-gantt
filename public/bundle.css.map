{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\Grid.html",
    "..\\src\\Row.html",
    "..\\src\\RowHeader.html",
    "..\\src\\Column.html",
    "..\\src\\ColumnHeader.html",
    "..\\src\\Task.html"
  ],
  "sourcesContent": [
    "<div class=\"grid\">\r\n\r\n    <div class=\"side-header-container\" style=\"height:{$headerHeight}px;width:100px\">\r\n    \r\n    </div>\r\n\r\n    <div class=\"main-header-container\" style=\"height:{$headerHeight}px;width:{$width}px\">\r\n        {#each $headers as header}\r\n            <ColumnHeader header={header}/>\r\n        {/each}\r\n    </div>\r\n\r\n    <div class=\"side-container\">\r\n        {#each rows as row}\r\n            <RowHeader \r\n                bind:label=row.label/>\r\n        {/each}\r\n    </div>\r\n\r\n    <div class=\"main-container\" style=\"width:{$width}px\">\r\n        <div class=\"column-container\">\r\n            {#each columns as column}\r\n                <Column width={column.width}/>\r\n            {/each}\r\n        </div>    \r\n        <div class=\"row-container\" ref:rowContainer>\r\n            {#each $rows as row}\r\n                <Row \r\n                row={row}\r\n                bind:tasks=row.tasks\r\n                    width={width}/>\r\n            {/each}\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n<style>\r\n    .grid {\r\n        position: relative;\r\n        \r\n        font-family: tahoma, arial, verdana, Sans-serif;\r\n        font-size: 10px;\r\n        color: #656565;\r\n    }\r\n\r\n    .column-container {\r\n        position: absolute;\r\n        height: 100%;\r\n\r\n        float: left;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .row-container {\r\n        width: 100%;\r\n        display: inline-block;\r\n    }\r\n\r\n\r\n    .side-container {\r\n        width: 100px;\r\n        float: left;\r\n    }\r\n\r\n    .main-container {\r\n        position: relative;\r\n        overflow: auto;\r\n    }\r\n\r\n    .side-header-container {\r\n        float: left;\r\n    }\r\n\r\n    .main-header-container {\r\n        position: relative;\r\n        overflow: hidden;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    import Row from './Row.html';\r\n    import RowHeader from './RowHeader.html';\r\n    import Column from './Column.html';\r\n    import ColumnHeader from './ColumnHeader.html';\r\n    import { Utils } from \"./task.js\";\r\n\r\n    export default {\r\n        components: { Row, Column, RowHeader, ColumnHeader },\r\n        oncreate(){\r\n            const {from, to, width, magnetOffset, magnetUnit} = this.store.get();\r\n            let diva;\r\n            const columnWidth = Utils.getPositionByDate(from.clone().add(magnetOffset, magnetUnit), from, to, width);\r\n            diva = width / columnWidth\r\n            const columnCount = Math.ceil(width / columnWidth) \r\n\r\n            var columns = [];\r\n            \r\n            for(let i=0; i< columnCount; i++){\r\n                columns.push({width: columnWidth});\r\n            }\r\n\r\n            this.store.set({bodyElement: this.refs.rowContainer})\r\n\r\n            this.set({columns: columns});\r\n        },\r\n        actions: {\r\n\t\t},\r\n        data() {\r\n            return {\r\n                columns: []\r\n            }\r\n        }\r\n    };\r\n</script>",
    "<div class=\"row\" ref:row>\r\n    {#each tasks as task (task.id)}\r\n        <Task   row={row}\r\n                task={task}/>\r\n    {/each}\r\n</div>\r\n<style>\r\n    .row {\r\n        position: relative;\r\n        height: 24px;\r\n        width: 100%;\r\n        border-bottom: #efefef 1px solid;\r\n        box-sizing: border-box;\r\n    }\r\n</style>\r\n<script>\r\n        import Task from './Task.html';\r\n    \r\n        export default {\r\n            components: { Task },\r\n            oncreate() {\r\n                const { row } = this.get();\r\n                row.rowElement = this.refs.row;\r\n            }\r\n        };\r\n</script>",
    "<div class=\"row-header\">\r\n    {label}\r\n</div>\r\n<style>\r\n    .row-header {\r\n        position: relative;\r\n        height: 24px;\r\n\r\n        border-bottom: #efefef 1px solid;    \r\n        background-color: #fbfbfb;\r\n        font-weight: bold;\r\n        box-sizing: border-box;\r\n    }\r\n</style>\r\n<script>\r\n\r\n</script>",
    "<div class=\"column\" style=\"width:{width}px\"></div>\r\n<style>\r\n    .column {\r\n        position: relative;\r\n        display: inline-block;\r\n        height: 100%;    \r\n        border-left: #efefef 1px solid;\r\n        box-sizing: border-box;\r\n    }\r\n</style>",
    "<div class=\"column-header-row\" style=\"width:{width}px\">\r\n\r\n    {#each headers as header}\r\n        <div class=\"column-header\" style=\"width:{header.width}px\">\r\n            {header.label || 'N/A'}\r\n        </div>\r\n    {/each}\r\n</div>\r\n<style>\r\n    .column-header-row {\r\n        box-sizing: border-box;\r\n        border-top: 1px solid #ddd;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .column-header {\r\n        position: relative;\r\n        display: inline-block;\r\n        height: 100%;    \r\n        border-left: #efefef 1px solid;\r\n        box-sizing: border-box;\r\n        text-overflow: clip;\r\n        vertical-align: top;\r\n    }\r\n</style>\r\n<script>\r\n    import moment from \"../node_modules/moment/src/moment.js\";\r\n    import { Utils } from \"./task.js\";\r\n    console.log(moment());\r\n\r\n\r\n\r\n    export default {\r\n        oncreate() {\r\n            \r\n            const { header } = this.get();\r\n\r\n            const {from, to, width } = this.store.get();\r\n            const columnWidth = Utils.getPositionByDate(from.clone().add(1, header.unit), from, to, width);\r\n            \r\n            const columnCount = Math.ceil(width / columnWidth) \r\n\r\n            var headers = [];\r\n            \r\n            \r\n\r\n            var headerTime = from.clone();\r\n\r\n            for(let i=0; i< columnCount; i++){\r\n                headers.push({width: columnWidth, label: headerTime.format(header.format)});\r\n                headerTime.add(1, header.unit);\r\n            }\r\n\r\n            this.set({headers: headers});\r\n        },\r\n        data(){\r\n            return {\r\n                headers: []\r\n            }\r\n        }\r\n    };\r\n</script>",
    "<div class=\"task\" style=\"left:{task.left}px;width:{task.width}px;\"\r\n use:drag>\r\n    {task.label}\r\n</div>\r\n\r\n<style>\r\n    .task {\r\n\t\tposition: absolute;     \r\n        top: 0;\r\n        bottom: 0;   \r\n        height: 80%;\r\n        margin: auto;\r\n        background: rgb(116, 191, 255);\r\n\t}\r\n</style>\r\n\r\n<script>\r\n    import moment from \"../node_modules/moment/src/moment.js\";\r\n    import { Utils } from \"./task.js\";\r\n\r\n    const resizeHandleWidth = 15;\r\n\r\n    export default {\r\n        oncreate() {\r\n\r\n            const { task, row } = this.get();\r\n            task.row = row;\r\n\r\n            if(task.dragging) {\r\n\r\n            }\r\n\r\n            this.updateTaskPosition();\r\n        },\r\n        actions: {\r\n\t\t\tdrag(node) {\r\n\r\n                //var self = this;\r\n                const bodyElement  = document.getElementsByClassName(\"row-container\");\r\n                const windowElement = window;\r\n\r\n                const { task } = this.get();\r\n                task.component = this;\r\n                const { rows } = this.store.get();\r\n\r\n                let mouseStartPosX;\r\n                let mouseStartRight;\r\n\r\n                function onmousedown(event) {\r\n                    \r\n                    event.preventDefault();\r\n                    console.log('drag down');\r\n\r\n                    \r\n                    mouseStartPosX = Utils.getRelativePos(bodyElement[0], event).x - task.left; //Utils.getRelativePos(node, event).x; //  \r\n                    \r\n                    mouseStartRight = task.left + task.width;\r\n\r\n                    if(mouseStartPosX < resizeHandleWidth) {\r\n                        task.resizing = true;\r\n                        task.direction = 'left';\r\n                    }\r\n                    else if(mouseStartPosX > task.width - resizeHandleWidth) {\r\n                        task.resizing = true;\r\n                        task.direction = 'right';\r\n                    }\r\n                    else {\r\n                        task.dragging = true;\r\n                    }\r\n\r\n\r\n\r\n                    \r\n                    windowElement.addEventListener('mousemove', onmousemove, false);\r\n                    Utils.addEventListenerOnce(windowElement, 'mouseup', onmouseup);\r\n                }\r\n                \r\n                function onmousemove(event) {\r\n                    \r\n                    event.preventDefault();\r\n                    if(task.resizing) {\r\n\r\n                        const mousePos = Utils.getRelativePos(bodyElement[0], event);\r\n\r\n\r\n                        var x = mousePos.x// - mouseStartPosX;\r\n                        \r\n                        if(task.direction === 'left') { //resize ulijevo\r\n                            if(mousePos.x > task.left + task.width) {\r\n                                task.left = mouseStartRight; //mousePos.x //\r\n                                task.width = task.left - mousePos.x;\r\n                                task.direction = 'right'\r\n                                mouseStartRight = task.left + task.width;\r\n                            }\r\n                            else{\r\n                                task.left = x;\r\n                                task.width = mouseStartRight - x;\r\n                            }\r\n                        }\r\n                        else if(task.direction === 'right') {//resize desno\r\n                            if(mousePos.x <= task.left) {\r\n                                task.width = task.left - mousePos.x;\r\n                                task.left = mousePos.x;\r\n                                task.direction = 'left';\r\n                                mouseStartRight = task.left + task.width;\r\n                            }\r\n                            else {\r\n                                task.width = mousePos.x - task.left;\r\n                            }\r\n                        }\r\n\r\n                        console.log(mousePos.x, mouseStartPosX)\r\n\r\n                        console.log(x)\r\n\r\n                        task.component.updateTaskDate();\r\n                        task.component.updateTaskPosition();\r\n                    }\r\n\r\n                    if(task.dragging) {\r\n                        const mousePos = Utils.getRelativePos(bodyElement[0], event);\r\n\r\n\r\n                        var x = mousePos.x - mouseStartPosX;\r\n\r\n                        const store = task.component.store.get();\r\n                        const from = Utils.getDateByPosition(x, store.from, store.to, store.width);\r\n                        const to = Utils.getDateByPosition(x + task.width, store.from, store.to, store.width);\r\n                \r\n\r\n                        task.left = x;\r\n\r\n                        task.component.updateTaskDate();\r\n                        task.component.updateTaskPosition();\r\n                        //task.component.set({ task: task }); \r\n                        \r\n                        //row switching\r\n                        const rowCenterX = bodyElement[0].getBoundingClientRect().left + bodyElement[0].getBoundingClientRect().width / 2;\r\n                        const sourceRow = task.row;\r\n                        let targetRow;\r\n\r\n                        let elements = document.elementsFromPoint(rowCenterX, event.clientY);\r\n                        let rowElement = elements.find((element) => element.classList.contains('row'));\r\n                        if(rowElement !== undefined && rowElement !== sourceRow.rowElement) {\r\n\r\n                            const targetRow = rows.find((r) => r.rowElement === rowElement);\r\n                            console.log('move task to '+targetRow.label, targetRow);\r\n\r\n                            task.row = targetRow;\r\n                            targetRow.tasks.push(task);\r\n                            \r\n                            let i, task_;\r\n                            for (i = 0; i < sourceRow.tasks.length; i++) {\r\n                                task_ = sourceRow.tasks[i]\r\n                                if (task_ === task) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            sourceRow.tasks.splice(i, 1);\r\n                            task.component.store.set({rows: rows});\r\n                            \r\n                            task.component.fire('taskMoved', { task: task, row: targetRow });\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                function onmouseup(event) {\r\n                    console.log('drag up'); \r\n                    task.dragging = false;\r\n                    task.resizing = false;\r\n                    windowElement.removeEventListener('mousemove', onmousemove, false);\r\n                }\r\n\r\n                node.addEventListener('mousedown', onmousedown, false);\r\n                \r\n                //bind mousemove on body, only on move\r\n                //node.addEventListener('mousemove', onmousemove, false);\r\n                \r\n                //bind on body, only on down\r\n                //node.addEventListener('mouseup', onmouseup, false);\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tupdate() {\r\n                        \r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tdestroy() {\r\n\t\t\t\t\t\tnode.removeEventListener('mousedown', onmousedown, false);\r\n\t\t\t\t\t\t//node.removeEventListener('mousemove', onmousemove, false);\r\n\t\t\t\t\t\t//node.removeEventListener('mouseup', onmouseup, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n        methods: {\r\n\t\t\tupdateTaskPosition() {\r\n                const store = this.store.get();\r\n                const { task } = this.get();\r\n            \r\n                console.log(task.from.format('DD-MM-YYYY HH:mm:ss:SSS'), task.to.format('DD-MM-YYYY HH:mm:ss:SSS'));\r\n\r\n                if(!store.to) return;\r\n                const left = Utils.getPositionByDate(task.from, store.from, store.to, store.width);\r\n                const right = Utils.getPositionByDate(task.to, store.from, store.to, store.width); \r\n\r\n                task.left = left;\r\n                task.width = right - left;\r\n\r\n\r\n                console.log(task.left, task.width);\r\n\r\n                this.set({ task: task });\r\n            },\r\n            updateTaskDate() {\r\n                const store = this.store.get();\r\n                const { task } = this.get();\r\n                \r\n                const from = Utils.getDateByPosition(task.left, store.from, store.to, store.width);\r\n                const to = Utils.getDateByPosition(task.left + task.width, store.from, store.to, store.width);\r\n                \r\n\r\n                task.from = this.magnetDate(from);\r\n                task.to = this.magnetDate(to);\r\n\r\n                //console.log(from.format('DD-MM-YYYY HH:mm'), to.format('DD-MM-YYYY HH:mm'));\r\n                        \r\n                this.set({ task: task });\r\n            },\r\n            magnetDate(date) {\r\n                const { magnetUnit, magnetOffset } = this.store.get();\r\n                return Utils.roundTo(date, magnetUnit, magnetOffset);\r\n            }\r\n        },\r\n\r\n        data() {\r\n            return {\r\n                task: { dragging: false }\r\n            }\r\n        }\r\n    };\r\n</script>"
  ],
  "names": [],
  "mappings": "AAsCI,KAAK,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAElB,WAAW,CAAE,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,CAC/C,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,AAClB,CAAC,AAED,iBAAiB,cAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CAEZ,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,MAAM,AACpB,CAAC,AAED,cAAc,cAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,YAAY,AACzB,CAAC,AAGD,eAAe,cAAC,CAAC,AACb,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,IAAI,AACf,CAAC,AAED,eAAe,cAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,IAAI,AAClB,CAAC,AAED,sBAAsB,cAAC,CAAC,AACpB,KAAK,CAAE,IAAI,AACf,CAAC,AAED,sBAAsB,cAAC,CAAC,AACpB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,MAAM,AACpB,CAAC;ACtED,IAAI,eAAC,CAAC,AACF,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,OAAO,CAAC,GAAG,CAAC,KAAK,CAChC,UAAU,CAAE,UAAU,AAC1B,CAAC;ACTD,WAAW,eAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CAEZ,aAAa,CAAE,OAAO,CAAC,GAAG,CAAC,KAAK,CAChC,gBAAgB,CAAE,OAAO,CACzB,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,UAAU,AAC1B,CAAC;ACVD,OAAO,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,OAAO,CAAC,GAAG,CAAC,KAAK,CAC9B,UAAU,CAAE,UAAU,AAC1B,CAAC;ACCD,kBAAkB,eAAC,CAAC,AAChB,UAAU,CAAE,UAAU,CACtB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAC1B,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,AACpB,CAAC,AAED,cAAc,eAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,OAAO,CAAC,GAAG,CAAC,KAAK,CAC9B,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,IAAI,CACnB,cAAc,CAAE,GAAG,AACvB,CAAC;AClBD,KAAK,eAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CACZ,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACrC,CAAC"
}