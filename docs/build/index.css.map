{
  "version": 3,
  "file": "index.css",
  "sources": [
    "..\\..\\demo\\App.svelte",
    "..\\..\\demo\\DateTime.svelte",
    "..\\..\\demo\\GanttOptions.svelte",
    "..\\..\\demo\\Nav.svelte",
    "..\\..\\demo\\Dependencies.svelte",
    "..\\..\\demo\\Events.svelte",
    "..\\..\\demo\\External.svelte",
    "..\\..\\demo\\LargeDataset.svelte",
    "..\\..\\demo\\Tree.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import Nav from './components/Nav.svelte';  \r\n    import { Router, Route, navigate, Link } from \"svelte-routing\";\r\n    import LargeDataset from './routes/LargeDataset.svelte';\r\n    import Dependencies from './routes/Dependencies.svelte';\r\n    import External from './routes/External.svelte';\r\n    import Events from './routes/Events.svelte';\r\n    import Tree from './routes/Tree.svelte';\r\n    import { writable } from 'svelte/store';\r\n    import { setContext } from 'svelte';\r\n\r\n    let showOptions = false;\r\n    function onToggleOptions() {\r\n        showOptions = !showOptions;\r\n    }\r\n\r\n    let optionsStream = new writable({});\r\n    function onChangeOptions(event) {\r\n        const opts = event.detail;\r\n        $optionsStream = opts;\r\n        optionsStream.set(opts);\r\n        console.log('onChangeOptions', opts);\r\n    }\r\n\r\n    setContext('options', { optionsStream, toggle: new writable(false) });\r\n\r\n    function onLoadRoute(event) {\r\n        navigate(event.detail.url);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        overflow: auto;\r\n        flex: 1;\r\n    }\r\n</style>\r\n\r\n<Nav on:updateOptions={onChangeOptions} on:toggleOptions={onToggleOptions} on:loadRoute={onLoadRoute}/>\r\n<div class=\"container\">\r\n    <Router basepath=\"/svelte-gantt\">\r\n        <Route path=\"/\" component=\"{LargeDataset}\" />\r\n        <Route path=\"/dependencies\" component=\"{Dependencies}\" />\r\n        <Route path=\"/tree\" component=\"{Tree}\" />\r\n        <Route path=\"/external\" component=\"{External}\" />\r\n        <Route path=\"/events\" component=\"{Events}\" />\r\n    </Router>\r\n\r\n    {#if showOptions}\r\n        <!-- <GanttOptions options={options} on:change={onChangeOptions}/> -->\r\n    {/if}\r\n</div>",
    "<script>\r\n    export let value;\r\n    $: {\r\n        parseDate(value);\r\n    }\r\n\r\n    let dateStr = '';\r\n    let timeStr = '';\r\n    $: {\r\n        emitDate(dateStr, timeStr);\r\n    }\r\n\r\n    function parseDate(dateObj) {\r\n        if(dateObj) {\r\n            const [date, time] = new Date(dateObj).toLocaleString(\"sv-SE\").split(' ');\r\n            dateStr = date;\r\n            timeStr = time;\r\n        }\r\n    }\r\n\r\n    function emitDate(date, time) {\r\n        if(date && time) {\r\n            value = new Date(`${date} ${time}`);\r\n        } else {\r\n            value = null;\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .date-time {\r\n        display: flex;\r\n    }\r\n\r\n    input {\r\n        border: 0;\r\n        border-bottom: 1px solid #cc595e;\r\n        background: #cc595e36;\r\n    }\r\n</style>\r\n\r\n<div class=\"date-time\">\r\n    <input type=\"date\" bind:value={dateStr}>\r\n    <input type=\"time\" bind:value={timeStr}>\r\n</div>",
    "<script>\r\nimport { getContext } from \"svelte\";\r\n\r\n    import { createEventDispatcher } from \"svelte\";\r\n    import DateTime from './DateTime.svelte';\r\n\r\n\r\n    export let options;\r\n\r\n    $: {\r\n        dispatch('change', options);\r\n    }\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    const offsetOptions = [5, 10, 15, 30];\r\n\r\n    let { toggle, optionsStream } = getContext('options');\r\n    $: {\r\n        dispatch('change', $optionsStream);\r\n    };\r\n</script>\r\n\r\n<style>\r\n    .controls {\r\n        background: #ffc0c3;\r\n        padding: 16px;\r\n    }\r\n\r\n    .form-label {\r\n        display: block;\r\n    }\r\n\r\n    .form-group {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n\r\n    input, select {\r\n        border: 0;\r\n        border-bottom: 1px solid #cc595e;\r\n        background: #cc595e36;\r\n    }\r\n\r\n    h3 {\r\n        margin: 0;\r\n        margin-bottom: 1.5rem;\r\n    }\r\n</style>\r\n\r\n\r\n{#if $toggle}\r\n<div class=\"controls\">\r\n    <h3>Options</h3>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> columnOffset </label>\r\n        <select bind:value={options.columnOffset}>\r\n            {#each offsetOptions as offset}\r\n                <option value={offset}>{offset}</option>\r\n            {/each}\r\n        </select>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> magnetOffset </label>\r\n        <select bind:value={options.magnetOffset}>\r\n            {#each offsetOptions as offset}\r\n                <option value={offset}>{offset}</option>\r\n            {/each}\r\n        </select>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> rowHeight ({options.rowHeight}) </label>\r\n        <input type=\"range\" bind:value={options.rowHeight} min=\"20\" max=\"100\">\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> rowPadding ({options.rowPadding}) </label>\r\n        <input type=\"range\" bind:value={options.rowPadding} min=\"0\" max=\"20\" step=\"2\">\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> fitWidth </label>\r\n        <input type=checkbox bind:checked={options.fitWidth}>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> minWidth </label>\r\n        <input type=\"number\" bind:value={options.minWidth} min=\"800\">\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> from </label>\r\n        <DateTime bind:value={options.from}/>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> to </label>\r\n        <DateTime bind:value={options.to}/>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> headers[0].format </label>\r\n        <input type=\"text\" bind:value={options.headers[0].format}>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label\"> headers[1].format </label>\r\n        <input type=\"text\" bind:value={options.headers[1].format}>\r\n    </div>\r\n</div>\r\n{/if}",
    "<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    import { time } from '../utils';\r\n    import { getContext } from 'svelte';\r\n\r\n    export let currentStart = time('06:00');\r\n    export let currentEnd = time('18:00');\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    function onUpdateOptions(options) {\r\n        dispatch('updateOptions', options);\r\n    }\r\n\r\n    function onSetDayView() {\r\n        console.log('day view set');\r\n        onUpdateOptions({\r\n            fitWidth: true,\r\n            columnUnit: 'minute',\r\n            columnOffset: 15,\r\n            from: currentStart,\r\n            to: currentEnd,\r\n            minWidth: 1000,\r\n            headers: [{ unit: 'day', format: 'DD.MM.YYYY' }, { unit: 'hour', format: 'HH' }]\r\n        });\r\n    };\r\n\r\n    function onSetWeekView() {\r\n        console.log('week view set');\r\n        onUpdateOptions({\r\n            fitWidth: false,\r\n            columnUnit: 'hour',\r\n            columnOffset: 1,\r\n            from: currentStart.clone().startOf('week'),\r\n            to: currentStart.clone().endOf('week'),\r\n            minWidth: 5000,\r\n            headers: [{ unit: 'month', format: 'MMMM YYYY', sticky: true }, { unit: 'day', format: 'ddd DD', sticky: true }]\r\n        });\r\n    };\r\n\r\n    function onSetNextDay() {\r\n        currentStart.add(1, 'day');\r\n        currentEnd.add(1, 'day');\r\n        console.log('set next day');\r\n        onUpdateOptions({\r\n            from: currentStart,\r\n            to: currentEnd\r\n        });\r\n    };\r\n\r\n    function onSetPreviousDay() {\r\n        currentStart.subtract(1, 'day');\r\n        currentEnd.subtract(1, 'day');\r\n        console.log('set previous day');\r\n        onUpdateOptions({\r\n            from: currentStart,\r\n            to: currentEnd\r\n        });\r\n    };\r\n\r\n    let { toggle } = getContext('options');\r\n    function onToggleOptions() {\r\n        toggle.update(v => !v);\r\n        dispatch('toggleOptions');\r\n    }\r\n\r\n    function onLoadRoute(route) {\r\n        dispatch('loadRoute', { url: route});\r\n    }\r\n\r\n    import { Router, Link, Route } from \"svelte-routing\";\r\n</script>\r\n\r\n<style>\r\n    button, input[type=button] {\r\n        border: transparent;\r\n        font-size: 14px;\r\n        font-weight: 300;\r\n        padding: 6px 12px;\r\n        background: #cc595e;\r\n        color: #ffffff;\r\n        cursor: pointer;\r\n        transition: background 0.2s;\r\n        outline: none;\r\n    }\r\n    \r\n    input[type=button]:hover {\r\n        background-color: #b14d51;\r\n    }\r\n    \r\n    input[type=button]:active {\r\n        background-color: #9d4548;\r\n    }\r\n    \r\n    .header {\r\n        display: flex;\r\n        padding: 16px;\r\n        background: #ee6e73;\r\n    }\r\n    \r\n    @media only screen and (max-width: 900px) {\r\n        .header {\r\n            flex-direction: column;\r\n        }\r\n    \r\n        .header-title {\r\n            justify-content: center;\r\n            margin-bottom: 6px;\r\n        }\r\n    \r\n        .header-controls {\r\n            justify-content: center;\r\n        }\r\n    }\r\n    \r\n    .header-title {\r\n        display: flex;\r\n        flex: 1;\r\n        align-items: center;\r\n        font-size: 36px;\r\n        padding: 0 16px;\r\n    }\r\n    \r\n    .header-title a {\r\n        color: #ffffff;\r\n        text-decoration: none;\r\n    }\r\n    \r\n    .header-controls {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    \r\n    .header input {\r\n        margin-right: 4px;\r\n    }\r\n</style>\r\n\r\n<header class=\"header\">\r\n    <div class=\"header-title\">\r\n        <a href=\"https://github.com/ANovokmet/svelte-gantt\">Svelte-gantt</a>\r\n    </div>\r\n    <div class=\"header-controls\">\r\n        <input type=\"button\" value=\"Tree\" on:click={() => onLoadRoute('/svelte-gantt/tree')}>\r\n        <input type=\"button\" value=\"Dependencies\" on:click={() => onLoadRoute('/svelte-gantt/dependencies')}/>\r\n        <input type=\"button\" value=\"Large\" on:click={() => onLoadRoute('/svelte-gantt/')}/>\r\n        <input type=\"button\" value=\"External\" on:click={() => onLoadRoute('/svelte-gantt/external')}/>\r\n        <input type=\"button\" value=\"Events\" on:click={() => onLoadRoute('/svelte-gantt/events')}/>\r\n\r\n        <input type=\"button\" value=\"<\" on:click={onSetPreviousDay}/>\r\n        <input type=\"button\" value=\"Day view\" on:click={onSetDayView}/>\r\n        <input type=\"button\" value=\">\" on:click={onSetNextDay}/>\r\n\r\n        <input type=\"button\" value=\"Week view\" on:click={onSetWeekView}/>\r\n        <!-- <input id=\"new-task\" type=\"button\" value=\"Drag to gantt\"/> -->\r\n        <button on:click={onToggleOptions}>|||</button>\r\n        <!-- <input type=\"button\" value=\"{showCode ? 'Hide data' : 'Show data'}\" on:click={() => showCode = !showCode}/> -->\r\n    </div>\r\n</header>",
    "<script>\r\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\r\n    import { onMount } from 'svelte';\r\n    import { time } from '../utils';\r\n    import moment from 'moment';\r\n    import GanttOptions from '../components/GanttOptions.svelte';\r\n\r\n    const currentStart = time('06:00');\r\n    const currentEnd = time('18:00');\r\n\r\n    const colors = ['blue', 'green', 'orange']\r\n\r\n    const timeRanges = [\r\n        {\r\n            id: 0,\r\n            from: time('10:00'),\r\n            to: time('12:00'),\r\n            classes: null,\r\n            label: 'Lunch'\r\n        },\r\n        {\r\n            id: 1,\r\n            from: time('15:00'),\r\n            to: time('17:00'),\r\n            classes: null,\r\n            label: 'Dinner'\r\n        }\r\n    ];\r\n\r\n    export const data = {\r\n        rows: [{\r\n            \"id\": 1,\r\n            \"label\": \"Preparation and Planning\"\r\n        }, {\r\n            \"id\": 2,\r\n            \"label\": \"Development\"\r\n        }, {\r\n            \"id\": 3,\r\n            \"label\": \"Implementation\"\r\n        }, {\r\n            \"id\": 4,\r\n            \"label\": \"Training\"\r\n        }, {\r\n            \"id\": 5,\r\n            \"label\": \"Roll-out product\"\r\n        }],\r\n        tasks: [{\r\n            \"id\": 1,\r\n            \"resourceId\": 1,\r\n            \"label\": \"Preparation\",\r\n            \"from\": time(\"7:00\"),\r\n            \"to\": time(\"9:00\"),\r\n            \"classes\": \"orange\"\r\n        }, {\r\n            \"id\": 2,\r\n            \"resourceId\": 1,\r\n            \"label\": \"Planning\",\r\n            \"from\": time(\"9:30\"),\r\n            \"to\": time(\"11:00\"),\r\n            \"classes\": \"orange\"\r\n        }, {\r\n            \"id\": 3,\r\n            \"resourceId\": 2,\r\n            \"label\": \"Development\",\r\n            \"from\": time(\"12:00\"),\r\n            \"to\": time(\"13:30\"),\r\n            \"classes\": \"orange\"\r\n        }, {\r\n            \"id\": 4,\r\n            \"resourceId\": 3,\r\n            \"label\": \"Implementation\",\r\n            \"from\": time(\"13:45\"),\r\n            \"to\": time(\"15:45\"),\r\n            \"classes\": \"orange\"\r\n        }, {\r\n            \"id\": 5,\r\n            \"resourceId\": 5,\r\n            \"label\": \"Finish\",\r\n            \"from\": time(\"17:00\"),\r\n            \"to\": time(\"17:45\"),\r\n            \"classes\": \"green\"\r\n        }, {\r\n            \"id\": 6,\r\n            \"resourceId\": 4,\r\n            \"label\": \"Training\",\r\n            \"from\": time(\"7:00\"),\r\n            \"to\": time(\"10:00\"),\r\n            \"classes\": \"blue\"\r\n        }],\r\n        dependencies: [{\r\n            id: 1,\r\n            fromId: 1,\r\n            toId: 2\r\n        }, {\r\n            id: 2,\r\n            fromId: 2,\r\n            toId: 3\r\n        }, {\r\n            id: 3,\r\n            fromId: 3,\r\n            toId: 4\r\n        }, {\r\n            id: 4,\r\n            fromId: 4,\r\n            toId: 5\r\n        }, {\r\n            id: 5,\r\n            fromId: 6,\r\n            toId: 5\r\n        }]\r\n    };\r\n\r\n    let options = {\r\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\r\n        rows: data.rows,\r\n        tasks: data.tasks,\r\n        dependencies: data.dependencies,\r\n        timeRanges,\r\n        columnOffset: 15,\r\n        magnetOffset: 15,\r\n        rowHeight: 52,\r\n        rowPadding: 6,\r\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\r\n        fitWidth: true,\r\n        minWidth: 800,\r\n        from: currentStart,\r\n        to: currentEnd,\r\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\r\n        tableWidth: 240,\r\n        ganttTableModules: [SvelteGanttTable],\r\n        ganttBodyModules: [SvelteGanttDependencies]\r\n    }\r\n\r\n    let gantt;\r\n    onMount(() => {\r\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\r\n    });\r\n\r\n    function onChangeOptions(event) {\r\n        const opts = event.detail;\r\n        Object.assign(options, opts);\r\n        gantt.$set(options);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    #example-gantt {\r\n        flex-grow: 1;\r\n        overflow: auto;\r\n    }\r\n\r\n    .container {\r\n        display: flex;\r\n        overflow: auto;\r\n        flex: 1;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div id=\"example-gantt\"></div>\r\n    <GanttOptions options={options} on:change={onChangeOptions}/>\r\n</div>",
    "<script>\r\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\r\n    import { onMount, getContext } from 'svelte';\r\n    import { time } from '../utils';\r\n    import moment from 'moment';\r\n    import GanttOptions from '../components/GanttOptions.svelte';\r\n\r\n    const currentStart = time('06:00');\r\n    const currentEnd = time('18:00');\r\n\r\n    export const data = {\r\n        rows: [{\r\n            id: 1,\r\n            label: \"Accounting\",\r\n        }, {\r\n            id: 2,\r\n            label: \"Business Development\",\r\n        }, {\r\n            id: 3,\r\n            label: \"Ida Flewan\"\r\n        }, {\r\n            id: 4,\r\n            label: \"Lauréna Shrigley\"\r\n        }, {\r\n            id: 5,\r\n            label: \"Ange Kembry\"\r\n        }],\r\n        tasks: [{\r\n            id: 3,\r\n            resourceId: 1,\r\n            label: \"PET-CT\",\r\n            from: time(\"13:30\"),\r\n            to: time(\"15:00\"),\r\n            classes: \"orange\"\r\n        }, {\r\n            id: 4,\r\n            resourceId: 1,\r\n            label: \"Auditing\",\r\n            from: time(\"9:30\"),\r\n            to: time(\"11:30\"),\r\n            classes: \"orange\"\r\n        }, {\r\n            id: 5,\r\n            resourceId: 2,\r\n            label: \"Security Clearance\",\r\n            from: time(\"15:15\"),\r\n            to: time(\"16:00\"),\r\n            classes: \"green\"\r\n        }, {\r\n            id: 6,\r\n            resourceId: 2,\r\n            label: \"Policy Analysis\",\r\n            from: time(\"14:00\"),\r\n            to: time(\"17:00\"),\r\n            classes: \"blue\"\r\n        }, {\r\n            id: 7,\r\n            resourceId: 2,\r\n            label: \"Xbox 360\",\r\n            from: time(\"13:00\"),\r\n            to: time(\"14:00\"),\r\n            classes: \"blue\"\r\n        }, {\r\n            id: 8,\r\n            resourceId: 3,\r\n            label: \"GNU/Linux\",\r\n            from: time(\"14:00\"),\r\n            to: time(\"15:30\"),\r\n            classes: \"blue\"\r\n        }, {\r\n            id: 9,\r\n            resourceId: 4,\r\n            label: \"Electronic Trading\",\r\n            from: time(\"15:00\"),\r\n            to: time(\"17:00\"),\r\n            classes: \"green\"\r\n        }, {\r\n            id: 10,\r\n            resourceId: 5,\r\n            label: \"Alternative Medicine\",\r\n            from: time(\"14:30\"),\r\n            to: time(\"15:30\"),\r\n            classes: \"orange\"\r\n        }],\r\n        dependencies: []\r\n    }\r\n\r\n    let options = {\r\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\r\n        rows: data.rows,\r\n        tasks: data.tasks,\r\n        dependencies: data.dependencies,\r\n        timeRanges: [],\r\n        columnOffset: 15,\r\n        magnetOffset: 15,\r\n        rowHeight: 52,\r\n        rowPadding: 6,\r\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\r\n        fitWidth: true,\r\n        minWidth: 800,\r\n        from: currentStart,\r\n        to: currentEnd,\r\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\r\n        tableWidth: 240,\r\n        ganttTableModules: [SvelteGanttTable],\r\n        ganttBodyModules: [SvelteGanttDependencies],\r\n        taskElementHook: (node, task) => {\r\n\r\n            function onHover() {\r\n                console.log('[task] hover', task);\r\n            }\r\n\r\n            node.addEventListener('mouseenter', onHover);\r\n\r\n            return {\r\n                destroy() {\r\n                    console.log('[task] destroy');\r\n                    node.removeEventListener('mouseenter', onHover);\r\n                }\r\n            }\r\n        },\r\n        // taskContent: (task) => `${task.label} ${task.from.format('HH:mm')}`\r\n    }\r\n\r\n    let gantt;\r\n    onMount(() => {\r\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt-events'), props: options });\r\n\r\n        gantt.api.tasks.on.move((task) => console.log('Listener: task move', task));\r\n        //gantt.api.tasks.on.switchRow((task, row, previousRow) => console.log('Listener: task switched row', task));\r\n        gantt.api.tasks.on.select((task) => console.log('Listener: task selected', task));\r\n        //gantt.api.tasks.on.moveEnd((task) => console.log('Listener: task move end', task));\r\n        gantt.api.tasks.on.change(([data]) => console.log('Listener: task change', data));\r\n        gantt.api.tasks.on.changed((task) => console.log('Listener: task changed', task));\r\n    });\r\n\r\n\r\n    function onChangeOptions(event) {\r\n        const opts = event.detail;\r\n        Object.assign(options, opts);\r\n        gantt.$set(options);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    #example-gantt-events {\r\n        flex-grow: 1;\r\n        overflow: auto;\r\n    }\r\n\r\n    .container {\r\n        display: flex;\r\n        overflow: auto;\r\n        flex: 1;\r\n    }\r\n\r\n    #example-gantt-events :global(.sg-hover) {\r\n        background-color: #00000008;\r\n    }\r\n\r\n    #example-gantt-events :global(.sg-hover .sg-table-body-cell) {\r\n        background-color: #00000008;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div id=\"example-gantt-events\"></div>\r\n    <GanttOptions options={options} on:change={onChangeOptions}/>\r\n</div>",
    "<script>\r\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\r\n    import { onMount, getContext } from 'svelte';\r\n    import { time } from '../utils';\r\n    import moment from 'moment';\r\n    import GanttOptions from '../components/GanttOptions.svelte';\r\n\r\n    const currentStart = time('06:00');\r\n    const currentEnd = time('18:00');\r\n\r\n    const colors = ['blue', 'green', 'orange']\r\n    \r\n    let options2 = getContext('options');\r\n\r\n    export const data = {\r\n        rows: [{\r\n            id: 1,\r\n            label: \"Accounting\",\r\n        }, {\r\n            id: 2,\r\n            label: \"Business Development\",\r\n        }, {\r\n            id: 3,\r\n            label: \"Ida Flewan\"\r\n        }, {\r\n            id: 4,\r\n            label: \"Lauréna Shrigley\"\r\n        }, {\r\n            id: 5,\r\n            label: \"Ange Kembry\"\r\n        }],\r\n        tasks: [{\r\n            id: 3,\r\n            resourceId: 1,\r\n            label: \"PET-CT\",\r\n            from: time(\"13:30\"),\r\n            to: time(\"15:00\"),\r\n            classes: \"orange\"\r\n        }, {\r\n            id: 4,\r\n            resourceId: 1,\r\n            label: \"Auditing\",\r\n            from: time(\"9:30\"),\r\n            to: time(\"11:30\"),\r\n            classes: \"orange\"\r\n        }, {\r\n            id: 5,\r\n            resourceId: 2,\r\n            label: \"Security Clearance\",\r\n            from: time(\"15:15\"),\r\n            to: time(\"16:00\"),\r\n            classes: \"green\"\r\n        }, {\r\n            id: 6,\r\n            resourceId: 2,\r\n            label: \"Policy Analysis\",\r\n            from: time(\"14:00\"),\r\n            to: time(\"17:00\"),\r\n            classes: \"blue\"\r\n        }, {\r\n            id: 7,\r\n            resourceId: 2,\r\n            label: \"Xbox 360\",\r\n            from: time(\"13:00\"),\r\n            to: time(\"14:00\"),\r\n            classes: \"blue\"\r\n        }, {\r\n            id: 8,\r\n            resourceId: 3,\r\n            label: \"GNU/Linux\",\r\n            from: time(\"14:00\"),\r\n            to: time(\"15:30\"),\r\n            classes: \"blue\"\r\n        }, {\r\n            id: 9,\r\n            resourceId: 4,\r\n            label: \"Electronic Trading\",\r\n            from: time(\"15:00\"),\r\n            to: time(\"17:00\"),\r\n            classes: \"green\"\r\n        }, {\r\n            id: 10,\r\n            resourceId: 5,\r\n            label: \"Alternative Medicine\",\r\n            from: time(\"14:30\"),\r\n            to: time(\"15:30\"),\r\n            classes: \"orange\"\r\n        }],\r\n        dependencies: []\r\n    }\r\n\r\n    let options = {\r\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\r\n        rows: data.rows,\r\n        tasks: data.tasks,\r\n        dependencies: data.dependencies,\r\n        timeRanges: [],\r\n        columnOffset: 15,\r\n        magnetOffset: 15,\r\n        rowHeight: 52,\r\n        rowPadding: 6,\r\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\r\n        fitWidth: true,\r\n        minWidth: 800,\r\n        from: currentStart,\r\n        to: currentEnd,\r\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\r\n        tableWidth: 240,\r\n        ganttTableModules: [SvelteGanttTable],\r\n        ganttBodyModules: [SvelteGanttDependencies]\r\n    }\r\n\r\n    let gantt;\r\n    onMount(() => {\r\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\r\n        const external = new SvelteGanttExternal(document.getElementById('new-task'), {\r\n            gantt,\r\n            onsuccess: (row, date, gantt) => {\r\n                console.log(row.model.id, new Date(date).toISOString())\r\n                const id = 5000 + Math.floor(Math.random() * 1000);\r\n                gantt.updateTask({\r\n                    id,\r\n                    label: `Task #${id}`,\r\n                    from: date,\r\n                    to: date + 3 * 60 * 60 * 1000,\r\n                    classes: colors[(Math.random() * colors.length) | 0],\r\n                    resourceId: row.model.id\r\n                });\r\n            },\r\n            elementContent: () => {\r\n                const element = document.createElement('div');\r\n                element.innerHTML = 'New Task';\r\n                element.className = 'sg-external-indicator';\r\n                return element;\r\n            }\r\n        });\r\n    });\r\n\r\n    function onChangeOptions(event) {\r\n        const opts = event.detail;\r\n        Object.assign(options, opts);\r\n        gantt.$set(options);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    #example-gantt {\r\n        flex-grow: 1;\r\n        overflow: auto;\r\n    }\r\n\r\n    .container {\r\n        display: flex;\r\n        overflow: auto;\r\n        flex: 1;\r\n    }\r\n\r\n    #new-task {\r\n        position: absolute;\r\n        bottom: 0;\r\n        right: 0;\r\n        z-index: 1;\r\n        background-color: #ee6e73;\r\n        color: white;\r\n        padding: 1rem;\r\n        margin: 0.5rem;\r\n        cursor: grab;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div id=\"example-gantt\"></div>\r\n    <div id=\"new-task\">Drag to gantt</div>\r\n    <GanttOptions options={options} on:change={onChangeOptions}/>\r\n</div>",
    "<script>\r\n    import { SvelteGantt, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\r\n    import { onMount } from 'svelte';\r\n    import { time } from '../utils';\r\n    import moment from 'moment';\r\n    import GanttOptions from '../components/GanttOptions.svelte';\r\n    \r\n    const currentStart = time('06:00');\r\n    const currentEnd = time('18:00');\r\n    let generation = 0;\r\n    let rowCount = 100;\r\n    const colors = ['blue', 'green', 'orange']\r\n\r\n    const timeRanges = [\r\n        {\r\n            id: 0,\r\n            from: time('10:00'),\r\n            to: time('12:00'),\r\n            classes: null,\r\n            label: 'Lunch'\r\n        },\r\n        {\r\n            id: 1,\r\n            from: time('15:00'),\r\n            to: time('17:00'),\r\n            classes: null,\r\n            label: 'Dinner'\r\n        }\r\n    ];\r\n\r\n    const data = generate();\r\n\r\n    let options = {\r\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\r\n        rows: data.rows,\r\n        tasks: data.tasks,\r\n        timeRanges,\r\n        columnOffset: 15,\r\n        magnetOffset: 15,\r\n        rowHeight: 52,\r\n        rowPadding: 6,\r\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\r\n        fitWidth: true,\r\n        minWidth: 800,\r\n        from: currentStart,\r\n        to: currentEnd,\r\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\r\n        tableWidth: 240,\r\n        ganttTableModules: [SvelteGanttTable]\r\n    }\r\n\r\n    let gantt;\r\n    onMount(() => {\r\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\r\n    });\r\n\r\n\r\n    function shuffle(array) {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n    }\r\n\r\n    function generate() {\r\n        const rows = [];\r\n        const tasks = [];\r\n\r\n        const ids = [...Array(rowCount).keys()];\r\n        shuffle(ids);\r\n\r\n        for (let i = 0; i < rowCount; i++) {\r\n            let rand_bool = Math.random() < 0.2;\r\n\r\n            rows.push({\r\n                id: i,\r\n                label: 'Row #' + i,\r\n                age: (Math.random() * 80) | 0,\r\n                enableDragging: true,\r\n                imageSrc: 'Content/joe.jpg',\r\n                classes: rand_bool ? ['row-disabled'] : undefined,\r\n                enableDragging: !rand_bool,\r\n                generation\r\n            });\r\n\r\n            rand_bool = Math.random() > 0.5;\r\n\r\n            const rand_h = (Math.random() * 10) | 0\r\n            const rand_d = (Math.random() * 5) | 0 + 1\r\n\r\n            tasks.push({\r\n                type: 'task',\r\n                id: ids[i],\r\n                resourceId: i,\r\n                label: 'Task #' + ids[i],\r\n                from: time(`${7 + rand_h}:00`),\r\n                to: time(`${7 + rand_h + rand_d}:00`),\r\n                classes: colors[(Math.random() * colors.length) | 0],\r\n                generation\r\n            });\r\n        }\r\n\r\n        generation += 1;\r\n\r\n        return { rows, tasks };\r\n    }\r\n\r\n    function onChangeOptions(event) {\r\n        const opts = event.detail;\r\n        Object.assign(options, opts);\r\n        gantt.$set(options);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    #example-gantt {\r\n        flex-grow: 1;\r\n        overflow: auto;\r\n    }\r\n\r\n    .container {\r\n        display: flex;\r\n        overflow: auto;\r\n        flex: 1;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div id=\"example-gantt\"></div>\r\n    <GanttOptions options={options} on:change={onChangeOptions}/>\r\n</div>",
    "<script>\r\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\r\n    import { onMount, getContext } from 'svelte';\r\n    import { time } from '../utils';\r\n    import moment from 'moment';\r\n    import GanttOptions from '../components/GanttOptions.svelte';\r\n\r\n    const currentStart = time('06:00');\r\n    const currentEnd = time('18:00');\r\n\r\n    const colors = ['blue', 'green', 'orange']\r\n\r\n    const timeRanges = [\r\n        {\r\n            id: 0,\r\n            from: time('10:00'),\r\n            to: time('12:00'),\r\n            classes: null,\r\n            label: 'Lunch'\r\n        },\r\n        {\r\n            id: 1,\r\n            from: time('15:00'),\r\n            to: time('17:00'),\r\n            classes: null,\r\n            label: 'Dinner'\r\n        }\r\n    ];\r\n\r\n    \r\n    let options2 = getContext('options');\r\n\r\n    export const data = {\r\n        rows: [{\r\n            id: 10,\r\n            label: \"Accounting\",\r\n            class: 'row-group',\r\n            iconClass: 'fas fa-calculator',\r\n            children: [{\r\n                id: 11,\r\n                label: \"Petunia Mulliner\"\r\n            }, {\r\n                id: 12,\r\n                label: \"Mélina Giacovetti\"\r\n            }, {\r\n                id: 13,\r\n                label: \"Marlène Lasslett\"\r\n            }, {\r\n                id: 14,\r\n                label: \"Adda Youell\"\r\n            }]\r\n        }, {\r\n            id: 20,\r\n            label: \"Business Development\",\r\n            class: 'row-group',\r\n            iconClass: 'fas fa-user-tie',\r\n            children: [{\r\n                id: 21,\r\n                label: \"Pietra Fallow\"\r\n            }, {\r\n                id: 22,\r\n                label: \"Mariellen Torbard\"\r\n            }, {\r\n                id: 23,\r\n                label: \"Renate Humbee\"\r\n            }]\r\n        }, {\r\n            id: 3,\r\n            label: \"Ida Flewan\"\r\n        }, {\r\n            id: 4,\r\n            label: \"Lauréna Shrigley\"\r\n        }, {\r\n            id: 5,\r\n            label: \"Ange Kembry\"\r\n        }],\r\n        tasks: [{\r\n            \"id\": 1,\r\n            \"resourceId\": 11,\r\n            \"label\": \"LPCVD\",\r\n            \"from\": time(\"9:00\"),\r\n            \"to\": time(\"11:00\"),\r\n            \"classes\": \"orange\"\r\n        }, {\r\n            \"id\": 2,\r\n            \"resourceId\": 12,\r\n            \"label\": \"Entrepreneurship\",\r\n            \"from\": time(\"10:00\"),\r\n            \"to\": time(\"12:30\"),\r\n            \"classes\": \"orange\"\r\n        }, {\r\n            \"id\": 3,\r\n            \"resourceId\": 13,\r\n            \"label\": \"PET-CT\",\r\n            \"from\": time(\"13:30\"),\r\n            \"to\": time(\"15:00\"),\r\n            \"classes\": \"orange\"\r\n        }, {\r\n            \"id\": 4,\r\n            \"resourceId\": 14,\r\n            \"label\": \"Auditing\",\r\n            \"from\": time(\"9:30\"),\r\n            \"to\": time(\"11:30\"),\r\n            \"classes\": \"orange\"\r\n        }, {\r\n            \"id\": 5,\r\n            \"resourceId\": 21,\r\n            \"label\": \"Security Clearance\",\r\n            \"from\": time(\"15:15\"),\r\n            \"to\": time(\"16:00\"),\r\n            \"classes\": \"green\"\r\n        }, {\r\n            \"id\": 6,\r\n            \"resourceId\": 22,\r\n            \"label\": \"Policy Analysis\",\r\n            \"from\": time(\"14:00\"),\r\n            \"to\": time(\"17:00\"),\r\n            \"classes\": \"blue\"\r\n        }, {\r\n            \"id\": 7,\r\n            \"resourceId\": 23,\r\n            \"label\": \"Xbox 360\",\r\n            \"from\": time(\"13:30\"),\r\n            \"to\": time(\"14:30\"),\r\n            \"classes\": \"blue\"\r\n        }, {\r\n            \"id\": 8,\r\n            \"resourceId\": 3,\r\n            \"label\": \"GNU/Linux\",\r\n            \"from\": time(\"14:00\"),\r\n            \"to\": time(\"15:30\"),\r\n            \"classes\": \"blue\"\r\n        }, {\r\n            \"id\": 9,\r\n            \"resourceId\": 4,\r\n            \"label\": \"Electronic Trading\",\r\n            \"from\": time(\"15:00\"),\r\n            \"to\": time(\"17:00\"),\r\n            \"classes\": \"green\"\r\n        }, {\r\n            \"id\": 10,\r\n            \"resourceId\": 5,\r\n            \"label\": \"Alternative Medicine\",\r\n            \"from\": time(\"14:30\"),\r\n            \"to\": time(\"15:30\"),\r\n            \"classes\": \"orange\"\r\n        }],\r\n        dependencies: []\r\n    }\r\n\r\n    let options = {\r\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\r\n        rows: data.rows,\r\n        tasks: data.tasks,\r\n        dependencies: data.dependencies,\r\n        timeRanges,\r\n        columnOffset: 15,\r\n        magnetOffset: 15,\r\n        rowHeight: 52,\r\n        rowPadding: 6,\r\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\r\n        fitWidth: true,\r\n        minWidth: 800,\r\n        from: currentStart,\r\n        to: currentEnd,\r\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\r\n        tableWidth: 240,\r\n        ganttTableModules: [SvelteGanttTable],\r\n        ganttBodyModules: [SvelteGanttDependencies]\r\n    }\r\n\r\n    let gantt;\r\n    onMount(() => {\r\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\r\n    });\r\n\r\n    function onChangeOptions(event) {\r\n        const opts = event.detail;\r\n        Object.assign(options, opts);\r\n        gantt.$set(options);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    #example-gantt {\r\n        flex-grow: 1;\r\n        overflow: auto;\r\n    }\r\n\r\n    .container {\r\n        display: flex;\r\n        overflow: auto;\r\n        flex: 1;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div id=\"example-gantt\"></div>\r\n    <GanttOptions options={options} on:change={onChangeOptions}/>\r\n</div>"
  ],
  "names": [],
  "mappings": "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"
}