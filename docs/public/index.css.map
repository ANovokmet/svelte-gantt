{
  "version": 3,
  "file": "index.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable } from '../dist/index';\r\n    import { onMount } from 'svelte';\r\n    import { time } from './utils';\r\n\r\n    const currentStart = time('06:00');\r\n    const currentEnd = time('18:00');\r\n\r\n    const colors = ['blue', 'green', 'orange']\r\n\r\n    const timeRanges = [{\r\n        id: 0,\r\n        from: time('10:00'),\r\n        to: time('12:00'),\r\n        classes: null,\r\n        label: 'Lunch'\r\n    }];\r\n\r\n    const options = {\r\n        rows: [],\r\n        tasks: [],\r\n        timeRanges,\r\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\r\n        fitWidth: true,\r\n        from: currentStart,\r\n        to: currentEnd,\r\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\r\n        tableWidth: 240,\r\n        ganttTableModules: [SvelteGanttTable],\r\n        ganttBodyModules: [SvelteGanttDependencies]\r\n    }\r\n\r\n    let gantt;\r\n\r\n    onMount(() => {\r\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\r\n        //gantt.api.tasks.on.move((task) => console.log('Listener: task move', task));\r\n        //gantt.api.tasks.on.switchRow((task, row, previousRow) => console.log('Listener: task switched row', task));\r\n        gantt.api.tasks.on.select((task) => console.log('Listener: task selected', task));\r\n        //gantt.api.tasks.on.moveEnd((task) => console.log('Listener: task move end', task));\r\n        gantt.api.tasks.on.changed((task) => console.log('Listener: task changed', task));\r\n\r\n        const external = new SvelteGanttExternal(document.getElementById('new-task'), {\r\n            gantt,\r\n            onsuccess: (row, date, gantt) => {\r\n                console.log(row.model.id, date.format())\r\n                const id = 5000 + Math.floor(Math.random() * 1000);\r\n                gantt.updateTask({\r\n                    id,\r\n                    label: `Task #${id}`,\r\n                    from: date,\r\n                    to: date.clone().add(3, 'hour'),\r\n                    classes: colors[(Math.random() * colors.length) | 0],\r\n                    resourceId: row.model.id\r\n                });\r\n            },\r\n            elementContent: () => {\r\n                const element = document.createElement('div');\r\n                element.innerHTML = 'New Task';\r\n                element.className = 'sg-external-indicator';\r\n                return element;\r\n            }\r\n        });\r\n\r\n        router();\r\n    });\r\n\r\n    function onSetDayView() {\r\n        console.log('day view set');\r\n        gantt.$set({\r\n            fitWidth: true,\r\n            columnUnit: 'minute',\r\n            columnOffset: 15,\r\n            from: currentStart,\r\n            to: currentEnd,\r\n            minWidth: 1000,\r\n            headers: [{ unit: 'day', format: 'DD.MM.YYYY' }, { unit: 'hour', format: 'HH' }]\r\n        });\r\n    };\r\n\r\n    function onSetWeekView() {\r\n        console.log('week view set');\r\n        gantt.$set({\r\n            fitWidth: false,\r\n            columnUnit: 'hour',\r\n            columnOffset: 1,\r\n            from: currentStart.clone().startOf('week'),\r\n            to: currentStart.clone().endOf('week'),\r\n            minWidth: 5000,\r\n            headers: [{ unit: 'month', format: 'MMMM YYYY' }, { unit: 'day', format: 'ddd DD' }]\r\n        });\r\n    };\r\n\r\n    function onSetNextDay() {\r\n        currentStart.add(1, 'day');\r\n        currentEnd.add(1, 'day');\r\n        console.log('set next day');\r\n\r\n        gantt.$set({\r\n            from: currentStart,\r\n            to: currentEnd\r\n        });\r\n    };\r\n\r\n    function onSetPreviousDay() {\r\n        currentStart.subtract(1, 'day');\r\n        currentEnd.subtract(1, 'day');\r\n        console.log('set previous day');\r\n\r\n        gantt.$set({\r\n            from: currentStart,\r\n            to: currentEnd\r\n        });\r\n    };\r\n\r\n    let showCode = false;\r\n    let code = ''; \r\n    import { generate as generateLarge } from './examples/large';\r\n    function loadLarge() {\r\n        const data = generateLarge();\r\n        gantt.$set({\r\n            ...data,\r\n            dependencies: []\r\n        });\r\n        code = JSON.stringify(data, null, '  ');\r\n    }\r\n\r\n    import { data as dependencyData } from './examples/dependencies';\r\n    function loadDependencies() {\r\n        gantt.$set({...dependencyData});\r\n        code = JSON.stringify(dependencyData, null, '  ');\r\n    }\r\n\r\n    import { data as treeData } from './examples/tree';\r\n    function loadTree() {\r\n        gantt.$set({...treeData});\r\n        code = JSON.stringify(treeData, null, '  ');\r\n    }\r\n\r\n    function loadRoute(name) {\r\n        location.hash = `#/${name}`;\r\n    }\r\n\r\n    const routes = {\r\n        '/dependencies': loadDependencies,\r\n        '/tree': loadTree,\r\n        '/large': loadLarge,\r\n        '': loadLarge\r\n    }\r\n\r\n    function router() {\r\n        const url = location.hash.slice(1);\r\n        routes[url]();\r\n    }\r\n    window.addEventListener('hashchange', router);\r\n</script>\r\n\r\n<style>\r\n    #example-gantt {\r\n        flex-grow: 1;\r\n        overflow: auto;\r\n    }\r\n\r\n    input[type=button] {\r\n        border: transparent;\r\n        font-size: 14px;\r\n        font-weight: 300;\r\n        padding: 6px 12px;\r\n        background: #cc595e;\r\n        color: #ffffff;\r\n        cursor: pointer;\r\n        transition: background 0.2s;\r\n        outline: none;\r\n    }\r\n    \r\n    input[type=button]:hover {\r\n        background-color: #b14d51;\r\n    }\r\n    \r\n    input[type=button]:active {\r\n        background-color: #9d4548;\r\n    }\r\n    \r\n    .header {\r\n        display: flex;\r\n        padding: 16px;\r\n        background: #ee6e73;\r\n    }\r\n    \r\n    @media only screen and (max-width: 900px) {\r\n        .header {\r\n            flex-direction: column;\r\n        }\r\n    \r\n        .header-title {\r\n            justify-content: center;\r\n            margin-bottom: 6px;\r\n        }\r\n    \r\n        .header-controls {\r\n            justify-content: center;\r\n        }\r\n    }\r\n    \r\n    .header-title {\r\n        display: flex;\r\n        flex: 1;\r\n        align-items: center;\r\n        font-size: 36px;\r\n        padding: 0 16px;\r\n    }\r\n    \r\n    .header-title a {\r\n        color: #ffffff;\r\n        text-decoration: none;\r\n    }\r\n    \r\n    .header-controls {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    \r\n    .header input {\r\n        margin-right: 4px;\r\n    }\r\n\r\n    .code-float {\r\n        margin: 0;\r\n        min-width: 400px;\r\n        overflow: auto;\r\n    }\r\n\r\n    pre {\r\n        background-color: #f9f9f9;\r\n        color: #333;\r\n        font-size: 0.8em;\r\n    }\r\n\r\n    .container {\r\n        display: flex;\r\n        overflow: auto;\r\n        flex: 1;\r\n    }\r\n</style>\r\n\r\n<header class=\"header\">\r\n    <div class=\"header-title\">\r\n        <a href=\"https://github.com/ANovokmet/svelte-gantt\">Svelte-gantt</a>\r\n    </div>\r\n    <div class=\"header-controls\">\r\n\r\n        <input type=\"button\" value=\"Tree\" on:click={() => loadRoute('tree')}>\r\n        <input type=\"button\" value=\"Dependencies\" on:click={() => loadRoute('dependencies')}/>\r\n        <input type=\"button\" value=\"Large\" on:click={() => loadRoute('large')}/>\r\n\r\n        <input type=\"button\" value=\"<\" on:click={onSetPreviousDay}/>\r\n        <input type=\"button\" value=\"Day view\" on:click={onSetDayView}/>\r\n        <input type=\"button\" value=\">\" on:click={onSetNextDay}/>\r\n\r\n        <input type=\"button\" value=\"Week view\" on:click={onSetWeekView}/>\r\n        <input id=\"new-task\" type=\"button\" value=\"Drag to gantt\"/>\r\n        <!-- <input type=\"button\" value=\"{showCode ? 'Hide data' : 'Show data'}\" on:click={() => showCode = !showCode}/> -->\r\n    </div>\r\n</header>\r\n<div class=\"container\">\r\n    <div id=\"example-gantt\"></div>\r\n\r\n    {#if showCode}\r\n    <pre class=\"code-float\">\r\n        {code}\r\n    </pre>\r\n    {/if}\r\n</div>"
  ],
  "names": [],
  "mappings": "AA8JI,cAAc,4BAAC,CAAC,AACZ,SAAS,CAAE,CAAC,CACZ,QAAQ,CAAE,IAAI,AAClB,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,4BAAC,CAAC,AAChB,MAAM,CAAE,WAAW,CACnB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,UAAU,CAAC,IAAI,CAC3B,OAAO,CAAE,IAAI,AACjB,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,MAAM,6BAAC,MAAM,AAAC,CAAC,AACtB,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,MAAM,6BAAC,OAAO,AAAC,CAAC,AACvB,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AAED,OAAO,4BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,OAAO,AACvB,CAAC,AAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACvC,OAAO,4BAAC,CAAC,AACL,cAAc,CAAE,MAAM,AAC1B,CAAC,AAED,aAAa,4BAAC,CAAC,AACX,eAAe,CAAE,MAAM,CACvB,aAAa,CAAE,GAAG,AACtB,CAAC,AAED,gBAAgB,4BAAC,CAAC,AACd,eAAe,CAAE,MAAM,AAC3B,CAAC,AACL,CAAC,AAED,aAAa,4BAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,IAAI,CAAE,CAAC,CACP,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,CAAC,CAAC,IAAI,AACnB,CAAC,AAED,2BAAa,CAAC,CAAC,cAAC,CAAC,AACb,KAAK,CAAE,OAAO,CACd,eAAe,CAAE,IAAI,AACzB,CAAC,AAED,gBAAgB,4BAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,qBAAO,CAAC,KAAK,cAAC,CAAC,AACX,YAAY,CAAE,GAAG,AACrB,CAAC,AAED,WAAW,4BAAC,CAAC,AACT,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,KAAK,CAChB,QAAQ,CAAE,IAAI,AAClB,CAAC,AAED,GAAG,4BAAC,CAAC,AACD,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,AACpB,CAAC,AAED,UAAU,4BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,IAAI,CACd,IAAI,CAAE,CAAC,AACX,CAAC"
}